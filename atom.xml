<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>轻松小屋</title>
  
  <subtitle>天行健,君子以自强不息;地势坤,君子以厚德载物。</subtitle>
  <link href="https://dumingqing.github.io/atom.xml" rel="self"/>
  
  <link href="https://dumingqing.github.io/"/>
  <updated>2022-04-27T02:52:20.286Z</updated>
  <id>https://dumingqing.github.io/</id>
  
  <author>
    <name>陈州居士</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo搭建博客使用教程</title>
    <link href="https://dumingqing.github.io/2022/04/27/Front-matter/"/>
    <id>https://dumingqing.github.io/2022/04/27/Front-matter/</id>
    <published>2022-04-27T00:56:14.000Z</published>
    <updated>2022-04-27T02:52:20.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo搭建博客使用教程"><a href="#Hexo搭建博客使用教程" class="headerlink" title="Hexo搭建博客使用教程"></a>Hexo搭建博客使用教程</h1><hr><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a><strong>开始使用</strong></h1><hr><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>欢迎使用 Hexo，本文档将帮助您快速上手。如果您在使用过程中遇到问题，请查看 <a href="https://hexo.io/zh-cn/docs/troubleshooting">问题解答</a> 中的解答，或者在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a>、<a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。</p><h2 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h3><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold&#x2F;post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h3 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h3><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td><code>url&#39;s pathname</code></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td><code>pretty_urls</code></td><td>改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td></td></tr><tr><td><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td><code>true</code></td></tr><tr><td><code>pretty_urls.trailing_html</code></td><td>是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td><code>true</code></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: false</span><br><span class="line"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span><br></pre></td></tr></table></figure><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹，<code>source_dir</code> 下的子目录</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &quot;mypage/**/*&quot;</span><br><span class="line"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts/test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>external_link.enable</code></td><td>在新标签中打开链接</td><td><code>true</code></td></tr><tr><td><code>external_link.field</code></td><td>对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td><code>site</code></td></tr><tr><td><code>external_link.exclude</code></td><td>需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td><code>[]</code></td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td><td></td></tr><tr><td><code>prismjs</code></td><td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td><td></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h2 id="日期-x2F-时间格式"><a href="#日期-x2F-时间格式" class="headerlink" title="日期 &#x2F; 时间格式"></a>日期 &#x2F; 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>HH:mm:ss</code></td></tr><tr><td><code>updated_option</code></td><td>当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td><td><code>mtime</code></td></tr></tbody></table><blockquote><p>updated_option</p><p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p><ul><li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li><li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li><li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li></ul><p><code>use_date_for_updated</code> 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_date_for_updated` | 启用以后，如果 Front Matter 中没有指定 `updated`， [`post.updated`](https://hexo.io/zh-cn/docs/configuration) 将会使用 `date` 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用 | `true</span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 &#x3D; 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>theme_config</code></td><td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr><tr><td><code>meta_generator</code></td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><h3 id="包括或不包括目录和文件"><a href="#包括或不包括目录和文件" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h3><p>在 Hexo 配置文件中，通过设置 include&#x2F;exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code> 和 <code>exclude</code> 选项只会应用到 <code>source/</code> ，而 <code>ignore</code> 选项会应用到所有文件夹.</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>include</code></td><td>Hexo 默认会不包括 <code>source/</code> 下的文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td><code>exclude</code></td><td>Hexo 不包括 <code>source/</code> 下的这些文件和目录</td></tr><tr><td><code>ignore</code></td><td>Hexo 会忽略整个 Hexo 项目下的这些文件夹或文件</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 处理或不处理目录或文件</span><br><span class="line">include:</span><br><span class="line">  - &quot;.nojekyll&quot;</span><br><span class="line">  # 处理 &#x27;source/css/_typing.css&#x27;</span><br><span class="line">  - &quot;css/_typing.css&quot;</span><br><span class="line">  # 处理 &#x27;source/_css/&#x27; 中的任何文件，但不包括子目录及其其中的文件。</span><br><span class="line">  - &quot;_css/*&quot;</span><br><span class="line">  # 处理 &#x27;source/_css/&#x27; 中的任何文件和子目录下的任何文件</span><br><span class="line">  - &quot;_css/**/*&quot;</span><br><span class="line"></span><br><span class="line">exclude:</span><br><span class="line">  # 不处理 &#x27;source/js/test.js&#x27;</span><br><span class="line">  - &quot;js/test.js&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 中的文件、但包括子目录下的所有目录和文件</span><br><span class="line">  - &quot;js/*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 中的文件和子目录下的任何文件</span><br><span class="line">  - &quot;js/**/*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 目录下的所有文件名以 &#x27;test&#x27; 开头的文件，但包括其它文件和子目录下的单文件</span><br><span class="line">  - &quot;js/test*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 及其子目录中任何以 &#x27;test&#x27; 开头的文件</span><br><span class="line">  - &quot;js/**/test*&quot;</span><br><span class="line">  # 不要用 exclude 来忽略 &#x27;source/_posts/&#x27; 中的文件。你应该使用 &#x27;skip_render&#x27;，或者在要忽略的文件的文件名之前加一个下划线 &#x27;_&#x27;</span><br><span class="line">  # 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。</span><br><span class="line"></span><br><span class="line">ignore:</span><br><span class="line">  # 忽略任何一个名叫 &#x27;foo&#x27; 的文件夹</span><br><span class="line">  - &quot;**/foo&quot;</span><br><span class="line">  # 只忽略 &#x27;themes/&#x27; 下的 &#x27;foo&#x27; 文件夹</span><br><span class="line">  - &quot;**/themes/*/foo&quot;</span><br><span class="line">  # 对 &#x27;themes/&#x27; 目录下的每个文件夹中忽略名叫 &#x27;foo&#x27; 的子文件夹</span><br><span class="line">  - &quot;**/themes/**/foo&quot;</span><br></pre></td></tr></table></figure><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p><h3 id="使用代替配置文件"><a href="#使用代替配置文件" class="headerlink" title="使用代替配置文件"></a>使用代替配置文件</h3><p>可以在 hexo-cli 中使用 <code>--config</code> 参数来指定自定义配置文件的路径。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 用 &#x27;custom.yml&#x27; 代替 &#x27;_config.yml&#x27;</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 &#x27;custom.yml&#x27; 和 &#x27;custom2.json&#x27;，优先使用 &#x27;custom3.yml&#x27;，然后是 &#x27;custom2.json&#x27;</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><p>例如，使用 <code>--options</code> 指定了两个自定义配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --config custom.yml,custom2.json</span><br></pre></td></tr></table></figure><p>如果 <code>custom.yml</code> 中指定了 <code>foo: bar</code>，在 custom2.json 中指定了 <code>&quot;foo&quot;: &quot;dinosaur&quot;</code>，那么在 <code>_multiconfig.yml</code> 中你会得到 <code>foo: dinosaur</code>。</p><h3 id="使用代替主题配置文件"><a href="#使用代替主题配置文件" class="headerlink" title="使用代替主题配置文件"></a>使用代替主题配置文件</h3><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。</p><p>除了自行维护独立的主题配置文件，你也可以在其它地方对主题进行配置。</p><p><strong>配置文件中的 <code>theme_config</code></strong></p><blockquote><p>该特性自 Hexo 2.8.2 起提供</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line">theme_config:</span><br><span class="line">  bio: &quot;My awesome bio&quot;</span><br><span class="line">  foo:</span><br><span class="line">    bar: &#x27;a&#x27;</span><br><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong></p><blockquote><p>该特性自 Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line"># _config.my-theme.yml</span><br><span class="line">bio: &quot;My awesome bio&quot;</span><br><span class="line">foo:</span><br><span class="line">  bar: &#x27;a&#x27;</span><br><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。网站</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title</code></td><td>网站标题</td></tr><tr><td><code>subtitle</code></td><td>网站副标题</td></tr><tr><td><code>description</code></td><td>网站描述</td></tr><tr><td><code>keywords</code></td><td>网站的关键词。支持多个关键词。</td></tr><tr><td><code>author</code></td><td>您的名字</td></tr><tr><td><code>language</code></td><td>网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td><code>timezone</code></td><td>网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="网址-1"><a href="#网址-1" class="headerlink" title="网址"></a>网址</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>url</code></td><td>网址, 必须以 <code>http://</code> 或 <code>https://</code> 开头</td><td></td></tr><tr><td><code>root</code></td><td>网站根目录</td><td><code>url&#39;s pathname</code></td></tr><tr><td><code>permalink</code></td><td>文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td><code>:year/:month/:day/:title/</code></td></tr><tr><td><code>permalink_defaults</code></td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td><code>pretty_urls</code></td><td>改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td></td></tr><tr><td><code>pretty_urls.trailing_index</code></td><td>是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td><code>true</code></td></tr><tr><td><code>pretty_urls.trailing_html</code></td><td>是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td><code>true</code></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: false</span><br><span class="line"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span><br></pre></td></tr></table></figure><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source</code></td></tr><tr><td><code>public_dir</code></td><td>公共文件夹，这个文件夹用于存放生成的站点文件。</td><td><code>public</code></td></tr><tr><td><code>tag_dir</code></td><td>标签文件夹</td><td><code>tags</code></td></tr><tr><td><code>archive_dir</code></td><td>归档文件夹</td><td><code>archives</code></td></tr><tr><td><code>category_dir</code></td><td>分类文件夹</td><td><code>categories</code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹，<code>source_dir</code> 下的子目录</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td>国际化（i18n）文件夹</td><td><code>:lang</code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &quot;mypage/**/*&quot;</span><br><span class="line"># 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 &#x27;public&#x27; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts/test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#x27;test-post.md&#x27; 的渲染</span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h2 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>new_post_name</code></td><td>新文章的文件名称</td><td>:title.md</td></tr><tr><td><code>default_layout</code></td><td>预设布局</td><td>post</td></tr><tr><td><code>auto_spacing</code></td><td>在中文和英文之间加入空格</td><td>false</td></tr><tr><td><code>titlecase</code></td><td>把标题转换为 title case</td><td>false</td></tr><tr><td><code>external_link</code></td><td>在新标签中打开链接</td><td>true</td></tr><tr><td><code>external_link.enable</code></td><td>在新标签中打开链接</td><td><code>true</code></td></tr><tr><td><code>external_link.field</code></td><td>对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td><code>site</code></td></tr><tr><td><code>external_link.exclude</code></td><td>需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td><code>[]</code></td></tr><tr><td><code>filename_case</code></td><td>把文件名称转换为 (1) 小写或 (2) 大写</td><td>0</td></tr><tr><td><code>render_drafts</code></td><td>显示草稿</td><td>false</td></tr><tr><td><code>post_asset_folder</code></td><td>启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td><td>false</td></tr><tr><td><code>relative_link</code></td><td>把链接改为与根目录的相对位址</td><td>false</td></tr><tr><td><code>future</code></td><td>显示未来的文章</td><td>true</td></tr><tr><td><code>highlight</code></td><td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> 进行设置</td><td></td></tr><tr><td><code>prismjs</code></td><td>代码块的设置, 请参考 <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> 进行设置</td><td></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h2 id="分类-amp-标签-1"><a href="#分类-amp-标签-1" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>default_category</code></td><td>默认分类</td><td><code>uncategorized</code></td></tr><tr><td><code>category_map</code></td><td>分类别名</td><td></td></tr><tr><td><code>tag_map</code></td><td>标签别名</td><td></td></tr></tbody></table><h2 id="日期-x2F-时间格式-1"><a href="#日期-x2F-时间格式-1" class="headerlink" title="日期 &#x2F; 时间格式"></a>日期 &#x2F; 时间格式</h2><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD</code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>HH:mm:ss</code></td></tr><tr><td><code>updated_option</code></td><td>当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td><td><code>mtime</code></td></tr></tbody></table><blockquote><p>updated_option</p><p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p><ul><li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li><li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li><li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li></ul><p><code>use_date_for_updated</code> 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_date_for_updated` | 启用以后，如果 Front Matter 中没有指定 `updated`， [`post.updated`](https://hexo.io/zh-cn/docs/configuration) 将会使用 `date` 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用 | `true</span><br></pre></td></tr></table></figure><h2 id="分页-1"><a href="#分页-1" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td>每页显示的文章量 (0 &#x3D; 关闭分页功能)</td><td><code>10</code></td></tr><tr><td><code>pagination_dir</code></td><td>分页目录</td><td><code>page</code></td></tr></tbody></table><h2 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td><code>theme_config</code></td><td>主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td><code>deploy</code></td><td>部署部分的设置</td></tr><tr><td><code>meta_generator</code></td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><h3 id="包括或不包括目录和文件-1"><a href="#包括或不包括目录和文件-1" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h3><p>在 Hexo 配置文件中，通过设置 include&#x2F;exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code> 和 <code>exclude</code> 选项只会应用到 <code>source/</code> ，而 <code>ignore</code> 选项会应用到所有文件夹.</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>include</code></td><td>Hexo 默认会不包括 <code>source/</code> 下的文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td><code>exclude</code></td><td>Hexo 不包括 <code>source/</code> 下的这些文件和目录</td></tr><tr><td><code>ignore</code></td><td>Hexo 会忽略整个 Hexo 项目下的这些文件夹或文件</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 处理或不处理目录或文件</span><br><span class="line">include:</span><br><span class="line">  - &quot;.nojekyll&quot;</span><br><span class="line">  # 处理 &#x27;source/css/_typing.css&#x27;</span><br><span class="line">  - &quot;css/_typing.css&quot;</span><br><span class="line">  # 处理 &#x27;source/_css/&#x27; 中的任何文件，但不包括子目录及其其中的文件。</span><br><span class="line">  - &quot;_css/*&quot;</span><br><span class="line">  # 处理 &#x27;source/_css/&#x27; 中的任何文件和子目录下的任何文件</span><br><span class="line">  - &quot;_css/**/*&quot;</span><br><span class="line"></span><br><span class="line">exclude:</span><br><span class="line">  # 不处理 &#x27;source/js/test.js&#x27;</span><br><span class="line">  - &quot;js/test.js&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 中的文件、但包括子目录下的所有目录和文件</span><br><span class="line">  - &quot;js/*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 中的文件和子目录下的任何文件</span><br><span class="line">  - &quot;js/**/*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 目录下的所有文件名以 &#x27;test&#x27; 开头的文件，但包括其它文件和子目录下的单文件</span><br><span class="line">  - &quot;js/test*&quot;</span><br><span class="line">  # 不处理 &#x27;source/js/&#x27; 及其子目录中任何以 &#x27;test&#x27; 开头的文件</span><br><span class="line">  - &quot;js/**/test*&quot;</span><br><span class="line">  # 不要用 exclude 来忽略 &#x27;source/_posts/&#x27; 中的文件。你应该使用 &#x27;skip_render&#x27;，或者在要忽略的文件的文件名之前加一个下划线 &#x27;_&#x27;</span><br><span class="line">  # 在这里配置一个 - &quot;_posts/hello-world.md&quot; 是没有用的。</span><br><span class="line"></span><br><span class="line">ignore:</span><br><span class="line">  # 忽略任何一个名叫 &#x27;foo&#x27; 的文件夹</span><br><span class="line">  - &quot;**/foo&quot;</span><br><span class="line">  # 只忽略 &#x27;themes/&#x27; 下的 &#x27;foo&#x27; 文件夹</span><br><span class="line">  - &quot;**/themes/*/foo&quot;</span><br><span class="line">  # 对 &#x27;themes/&#x27; 目录下的每个文件夹中忽略名叫 &#x27;foo&#x27; 的子文件夹</span><br><span class="line">  - &quot;**/themes/**/foo&quot;</span><br></pre></td></tr></table></figure><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p><h3 id="使用代替配置文件-1"><a href="#使用代替配置文件-1" class="headerlink" title="使用代替配置文件"></a>使用代替配置文件</h3><p>可以在 hexo-cli 中使用 <code>--config</code> 参数来指定自定义配置文件的路径。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 用 &#x27;custom.yml&#x27; 代替 &#x27;_config.yml&#x27;</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 &#x27;custom.yml&#x27; 和 &#x27;custom2.json&#x27;，优先使用 &#x27;custom3.yml&#x27;，然后是 &#x27;custom2.json&#x27;</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><p>例如，使用 <code>--options</code> 指定了两个自定义配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --config custom.yml,custom2.json</span><br></pre></td></tr></table></figure><p>如果 <code>custom.yml</code> 中指定了 <code>foo: bar</code>，在 custom2.json 中指定了 <code>&quot;foo&quot;: &quot;dinosaur&quot;</code>，那么在 <code>_multiconfig.yml</code> 中你会得到 <code>foo: dinosaur</code>。</p><h3 id="使用代替主题配置文件-1"><a href="#使用代替主题配置文件-1" class="headerlink" title="使用代替主题配置文件"></a>使用代替主题配置文件</h3><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。</p><p>除了自行维护独立的主题配置文件，你也可以在其它地方对主题进行配置。</p><p><strong>配置文件中的 <code>theme_config</code></strong></p><blockquote><p>该特性自 Hexo 2.8.2 起提供</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line">theme_config:</span><br><span class="line">  bio: &quot;My awesome bio&quot;</span><br><span class="line">  foo:</span><br><span class="line">    bar: &#x27;a&#x27;</span><br><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong></p><blockquote><p>该特性自 Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line"># _config.my-theme.yml</span><br><span class="line">bio: &quot;My awesome bio&quot;</span><br><span class="line">foo:</span><br><span class="line">  bar: &#x27;a&#x27;</span><br><span class="line"># themes/my-theme/_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们强烈建议你将所有的主题配置集中在一处。如果你不得不在多处配置你的主题，那么这些信息对你将会非常有用：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。</p></blockquote></blockquote><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p><p>本命令相当于执行了以下几步：</p><ol><li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li><li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li></ol><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--path</code></td><td>自定义新文章的路径</td></tr><tr><td><code>-r</code>, <code>--replace</code></td><td>如果存在同名文章，将其替换</td></tr><tr><td><code>-s</code>, <code>--slug</code></td><td>文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-d</code>, <code>--deploy</code></td><td>文件生成后立即部署网站</td></tr><tr><td><code>-w</code>, <code>--watch</code></td><td>监视文件变动</td></tr><tr><td><code>-b</code>, <code>--bail</code></td><td>生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td><code>-f</code>, <code>--force</code></td><td>强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td><code>-c</code>, <code>--concurrency</code></td><td>最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>-p</code>, <code>--port</code></td><td>重设端口</td></tr><tr><td><code>-s</code>, <code>--static</code></td><td>只使用静态文件</td></tr><tr><td><code>-l</code>, <code>--log</code></td><td>启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-g</code>, <code>--generate</code></td><td>部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-o</code>, <code>--output</code></td><td>设置输出路径</td></tr></tbody></table><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p><h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd /path/to/cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure><p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate rss &lt;source&gt;</span><br></pre></td></tr></table></figure><h2 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h2><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h2 id="Octopress"><a href="#Octopress" class="headerlink" title="Octopress"></a>Octopress</h2><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="https://wordpress.com/zh-cn/support/export/">WP支持页面</a>）。</p><p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate wordpress &lt;source&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p></blockquote><h2 id="Joomla"><a href="#Joomla" class="headerlink" title="Joomla"></a>Joomla</h2><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-joomla --save</span><br></pre></td></tr></table></figure><p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ==">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate joomla &lt;source&gt;</span><br></pre></td></tr></table></figure><hr><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a><strong>基本操作</strong></h1><hr><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td><code>post</code></td><td><code>source/_posts</code></td></tr><tr><td><code>page</code></td><td><code>source</code></td></tr><tr><td><code>draft</code></td><td><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>Disabling layout</p><p>If you don’t want an article (post&#x2F;page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href="https://hexo.io/zh-cn/docs/front-matter#%E5%B8%83%E5%B1%80">this section</a> for more details.</p></blockquote><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:title</code></td><td>标题（小写，空格将会被替换为短杠）</td></tr><tr><td><code>:year</code></td><td>建立的年份，比如， <code>2015</code></td></tr><tr><td><code>:month</code></td><td>建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td><code>:i_month</code></td><td>建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td><code>:day</code></td><td>建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td><code>:i_day</code></td><td>建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td></tr><tr><td><code>title</code></td><td>标题</td></tr><tr><td><code>date</code></td><td>文件建立日期</td></tr></tbody></table><h3 id="支持的格式"><a href="#支持的格式" class="headerlink" title="支持的格式"></a>支持的格式</h3><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p><h1 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013/7/13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td><td></td></tr><tr><td><code>excerpt</code></td><td>Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td><td></td></tr><tr><td><code>disableNunjucks</code></td><td>Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>&#x2F;<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td><td></td></tr><tr><td><code>lang</code></td><td>Set the language to override <a href="https://hexo.io/docs/internationalization#Path">auto-detection</a></td><td>Inherited from <code>_config.yml</code></td></tr></tbody></table><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>The default layout is <code>post</code>, in accordance to the value of <a href="https://hexo.io/zh-cn/docs/(/docs/configuration#Writing)"><code>default_layout</code></a> setting in <code>_config.yml</code>. When the layout is disabled (<code>layout: false</code>) in an article, it will not be processed with a theme. However, it will  still be rendered by any available renderer: if an article is written in Markdown and a Markdown renderer (like the default <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>) is installed, it will be rendered to HTML.</p><p><a href="https://hexo.io/docs/tag-plugins">Tag plugins</a> are always processed regardless of layout, unless disabled by the <code>disableNunjucks</code> setting or <a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">renderer</a>.</p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h2 id="JSON-Front-matter"><a href="#JSON-Front-matter" class="headerlink" title="JSON Front-matter"></a>JSON Front-matter</h2><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h1 id="标签插件（Tag-Plugins）"><a href="#标签插件（Tag-Plugins）" class="headerlink" title="标签插件（Tag Plugins）"></a>标签插件（Tag Plugins）</h1><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><p>虽然你可以使用任何格式书写你的文章，但是标签插件永远可用，且语法也都是一致的。</p><p><em>Tag plugins should not be wrapped inside Markdown syntax, e.g. <code>[](&#123;% post_path lorem-ipsum %&#125;)</code> is not supported.</em></p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor  elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><p><strong>David Levithan</strong>Wide Awake</p></blockquote><p><strong>引用 Twitter</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><p><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752</a></p></blockquote><p><strong>引用网络上的文章</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><p><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>Specify additional options in <code>option:value</code> format, e.g. <code>line_number:false first_line:5</code>.</p><table><thead><tr><th>Extra Options</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>line_number</code></td><td>Show line number</td><td><code>true</code></td></tr><tr><td><code>line_threshold</code></td><td>Only show line numbers as long as the numbers of lines of the code block exceed such threshold.</td><td><code>0</code></td></tr><tr><td><code>highlight</code></td><td>Enable code highlighting</td><td><code>true</code></td></tr><tr><td><code>first_line</code></td><td>Specify the first line number</td><td><code>1</code></td></tr><tr><td><code>mark</code></td><td>Line highlight specific line(s), each value separated by a comma. Specify number range using a dash Example: <code>mark:1,4-7,10</code> will mark line 1, 4 to 7 and 10.</td><td></td></tr><tr><td><code>wrap</code></td><td>Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">&#96;&#96;</a></td><td><code>true</code></td></tr></tbody></table><h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p><strong>普通的代码块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">Array.maparray.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">_.compactUnderscore.js_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><p>`&#96;&#96; [language] [title] [url] [link text] code snippet &#96;&#96;&#96;</p><h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><p>在文章中插入 Pull quote。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><p>在文章中嵌入 jsFiddle。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>在文章中插入 iframe。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>在文章中插入指定大小的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件。<code>source/downloads/code</code> 不是固定的，取决于你在配置文件中 <code>code_dir</code> 的配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><h3 id="样例-2"><a href="#样例-2" class="headerlink" title="样例"></a>样例</h3><p><strong>嵌入 test.js 文件全文</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>只嵌入第 3 行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 5 行至第 8 行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 5 行至文件结束</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 1 行至第 8 行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><p>在文章中插入 Youtube 视频。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id [type] [cookie] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p><strong>视频</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube lJIrF4YjHfQ %&#125;</span><br></pre></td></tr></table></figure><p><strong>播放列表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo &#x27;playlist&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><strong>隐私模式</strong></p><p>禁止 YouTube cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube lJIrF4YjHfQ false %&#125;</span><br><span class="line">&#123;% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo &#x27;playlist&#x27; false %&#125;</span><br></pre></td></tr></table></figure><h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>在文章中插入 Vimeo 视频。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p>引用其他文章的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。</p><p>例如，在文章中使用 <code>&#123;% post_link how-to-bake-a-cake %&#125;</code> 时，只需有一个名为 <code>how-to-bake-a-cake.md</code> 的文章文件即可。即使这个文件位于站点文件夹的 <code>source/posts/2015-02-my-family-holiday</code> 目录下、或者文章的永久链接是 <code>2018/en/how-to-bake-a-cake</code>，都没有影响。</p><p>默认链接文字是文章的标题，你也可以自定义要显示的文本。</p><p>默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用<code>escape</code>选项，禁止对特殊字符进行转义。</p><p><strong>链接使用文章的标题</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">Hexo 3.8.0 Released</a></p><p><strong>链接使用自定义文字</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released &#x27;通往文章的链接&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">通往文章的链接</a></p><p><strong>对标题的特殊字符进行转义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#x27;How to use &lt;b&gt; tag in title&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/">How to use  tag in title</a></p><p><strong>禁止对标题的特殊字符进行转义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#x27;&lt;b&gt;bold&lt;/b&gt; custom title&#x27; false %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/"><strong>bold</strong> custom title</a></p><h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>引用文章的资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path filename %&#125;</span><br><span class="line">&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Embed-image"><a href="#Embed-image" class="headerlink" title="Embed image"></a>Embed image</h3><p><em>hexo-renderer-marked 3.1.0+ can (optionally) resolves the post’s path of an image automatically, refer to <a href="https://hexo.io/docs/asset-folders#Embedding-an-image-using-markdown">this section</a> on how to enable it.</em></p><p>“foo.jpg” is located at <code>http://example.com/2020/01/02/hello/foo.jpg</code>.</p><p><strong>Default (no option)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg %&#125;</span><br><span class="line">&lt;img src=&quot;/2020/01/02/hello/foo.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Custom class</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img post-image foo.jpg %&#125;</span><br><span class="line">&lt;img src=&quot;/2020/01/02/hello/foo.jpg&quot; class=&quot;post-image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Display size</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg 500 400 %&#125;</span><br><span class="line">&lt;img src=&quot;/2020/01/02/hello/foo.jpg&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Title &amp; Alt</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img logo.svg &quot;lorem ipsum&#x27;dolor&#x27;&quot; %&#125;</span><br><span class="line">&lt;img src=&quot;/2020/01/02/hello/foo.jpg&quot; title=&quot;lorem ipsum&quot; alt=&quot;dolor&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h2 id="文章摘要和截断"><a href="#文章摘要和截断" class="headerlink" title="文章摘要和截断"></a>文章摘要和截断</h2><p>在文章中使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure><p>首页中将只会出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br></pre></td></tr></table></figure><p>正文中则会出现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line"></span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure><p>注意，摘要可能会被 Front Matter 中的 <code>excerpt</code> 覆盖。</p><h1 id="资源文件夹"><a href="#资源文件夹" class="headerlink" title="资源文件夹"></a>资源文件夹</h1><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h2 id="相对路径引用的标签插件"><a href="#相对路径引用的标签插件" class="headerlink" title="相对路径引用的标签插件"></a>相对路径引用的标签插件</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href="https://hexo.io/docs/tag-plugins#Include-Assets">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h2 id="Embedding-an-image-using-markdown"><a href="#Embedding-an-image-using-markdown" class="headerlink" title="Embedding an image using markdown"></a>Embedding an image using markdown</h2><p><a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a> 3.1.0 introduced a new option that allows you to embed an image in markdown without using <code>asset_img</code> tag plugin.</p><p>To enable:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>Once enabled, an asset image will be automatically resolved to its  corresponding post’s path. For example, “image.jpg” is located at  “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;image.jpg”, meaning it is an asset image of  “&#x2F;2020&#x2F;01&#x2F;02&#x2F;foo&#x2F;“ post, <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p><h1 id="数据文件"><a href="#数据文件" class="headerlink" title="数据文件"></a>数据文件</h1><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</p><p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Home: /</span><br><span class="line">Gallery: /gallery/</span><br><span class="line">Archives: /archives/</span><br></pre></td></tr></table></figure><p>您就能在模板中使用这些资料：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for (var link in site.data.menu) &#123; %&gt;</span><br><span class="line">  &lt;a href=&quot;&lt;%= site.data.menu[link] %&gt;&quot;&gt; &lt;%= link %&gt; &lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>渲染结果如下 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;/&quot;&gt; Home &lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/gallery/&quot;&gt; Gallery &lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/archives/&quot;&gt; Archives &lt;/a&gt;</span><br></pre></td></tr></table></figure><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h2 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a><a href="https://github.com/hexojs/hexo-server">hexo-server</a></h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure><h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h2 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h2><p><a href="http://pow.cx/">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl get.pow.cx | sh</span><br></pre></td></tr></table></figure><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.pow</span><br><span class="line">$ ln -s /path/to/myapp</span><br></pre></td></tr></table></figure><p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p><h1 id="生成文件"><a href="#生成文件" class="headerlink" title="生成文件"></a>生成文件</h1><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure><h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><blockquote><p>简写</p><p>上面两个命令可以简写为<br>$ hexo g -d<br>$ hexo d -g</p><h1 id="布置"><a href="#布置" class="headerlink" title="布置"></a>布置</h1><h1 id="将-Hexo-部署到-GitHub-Pages"><a href="#将-Hexo-部署到-GitHub-Pages" class="headerlink" title="将 Hexo 部署到 GitHub Pages"></a>将 Hexo 部署到 GitHub Pages</h1><p>在本教程中，我们将会使用 <a href="https://travis-ci.com/">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上。Travis CI 对于开源 repository  是免费的，但是这意味着你的站点文件将会是公开的。如果你希望你的站点文件不被公开，请直接前往本文 [私有 Repository](#私有  Repository) 部分。</p><ol><li>新建一个 repository。如果你希望你的站点能通过域名 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 访问，你的 repository 应该直接命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下 <code>public</code> 目录将不会（也不应该）被推送到 repository 中，你应该检查 <code>.gitignore</code> 文件中是否包含 <code>public</code> 一行，如果没有请加上。</li><li>将 <a href="https://github.com/marketplace/travis-ci">Travis CI</a> 添加到你的 GitHub 账户中。</li><li>前往 GitHub 的 <a href="https://github.com/settings/installations">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li><li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/">手动前往</a>。</li><li>在浏览器内新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li><li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</li><li>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master # build master branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure><ol><li>将 <code>.travis.yml</code> 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>gh-pages</code> 分支下</li><li>在 GitHub 中前往你的 repository 的设置页面，修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code>。</li><li>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点是否可以访问。这可能需要一些时间。</li></ol><h2 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h2><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h2 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h2><p>下面的指示基于 <a href="https://hexo.io/docs/one-command-deployment">一键部署</a> 编写。</p><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</li><li>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line">  # example, https://github.com/hexojs/hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure><ol><li>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</li><li>查看 <em>username</em>.github.io 上的网页是否部署成功。</li></ol><h2 id="有用的参考链接"><a href="#有用的参考链接" class="headerlink" title="有用的参考链接"></a>有用的参考链接</h2><ul><li><a href="https://help.github.com/categories/github-pages-basics/">GitHub Pages 使用文档</a></li><li><a href="https://docs.travis-ci.com/user/tutorial/">Travis CI 使用文档</a></li><li><a href="https://github.com/hexojs/awesome-hexo">Awesome Hexo</a></li><li>[在百度上搜索 “Hexo GitHub”](<a href="https://www.baidu.com/s?wd=Hexo">https://www.baidu.com/s?wd=Hexo</a> GitHub)</li></ul></blockquote><h1 id="将-Hexo-部署到-GitLab-Pages"><a href="#将-Hexo-部署到-GitLab-Pages" class="headerlink" title="将 Hexo 部署到 GitLab Pages"></a>将 Hexo 部署到 GitLab Pages</h1><p>在本教程中，我们将会使用 GitLab CI 将 Hexo 博客部署到 GitLab Pages 上。</p><ol><li>新建一个 repository。如果你希望你的站点能通过 <code>&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 域名访问，你的 repository 应该直接命名为 <code>&lt;你的 GitLab 用户名&gt;.gitlab.io</code>。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下 <code>public</code> 目录将不会（并且不应该）被推送到 repository 中，建议你检查 <code>.gitignore</code> 文件中是否包含 <code>public</code> 一行，如果没有请加上。</li><li>在你的站点文件夹中新建 <code>.gitlab-ci.yml</code> 文件：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">image: node:10-alpine # use nodejs v10 LTS</span><br><span class="line">cache:</span><br><span class="line">  paths:</span><br><span class="line">    - node_modules/</span><br><span class="line"></span><br><span class="line">before_script:</span><br><span class="line">  - npm install hexo-cli -g</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">pages:</span><br><span class="line">  script:</span><br><span class="line">    - hexo generate</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - public</span><br><span class="line">  only:</span><br><span class="line">    - master</span><br></pre></td></tr></table></figure><ol><li>GitLab CI 应该会自动开始运行，构建成功以后你应该可以在 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 查看你的网站。</li><li>(可选) 如果你需要查看生成的文件，可以在 <a href="https://docs.gitlab.com/ee/user/project/pipelines/job_artifacts.html">job artifact</a> 中找到。</li></ol><blockquote><p>在 GitLab.com 上，GitLab CI 是默认启用的。如果你使用的是自托管的 GitLab，你可能需要在 <code>Settings -&gt; CI / CD -&gt; Shared Runners</code> 启用 GitLab CI。</p></blockquote><h2 id="Project-page-1"><a href="#Project-page-1" class="headerlink" title="Project page"></a>Project page</h2><p>如果你更希望你的站点部署在 <code>&lt;你的 GitLab 用户名&gt;.gitlab.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 的值修改为 <code>https://&lt;你的 GitLab 用户名&gt;.gitlab.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h2 id="Useful-links"><a href="#Useful-links" class="headerlink" title="Useful links"></a>Useful links</h2><ul><li><a href="https://docs.gitlab.com/ee/user/project/pages/index.html">GitLab Pages 相关文档</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI 相关文档</a></li><li>[在百度上搜索 “Hexo GitLab”](<a href="https://www.baidu.com/s?wd=Hexo">https://www.baidu.com/s?wd=Hexo</a> GitLab)</li></ul><h1 id="一-键部署"><a href="#一-键部署" class="headerlink" title="一 键部署"></a>一 键部署</h1><iframe src="https://www.youtube.com/embed/B0yVJ46CTR8" loading="lazy" allowfullscreen="" frameborder="0"></iframe><p>Hexo 提供了快速方便的一键部署功能，让您只需一条命令就能将网站部署到服务器上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>在开始之前，您必须先在 <code>_config.yml</code> 中修改参数，一个正确的部署配置中至少要有 <code>type</code> 参数，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br></pre></td></tr></table></figure><p>您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo:</span><br><span class="line">- type: heroku</span><br><span class="line">  repo:</span><br></pre></td></tr></table></figure><p>Refer to the <a href="https://hexo.io/plugins/">Plugins</a> list for more deployment plugins.</p><blockquote><p>缩进</p><p>YAML依靠缩进来确定元素间的从属关系。因此，请确保每个deployer的缩进长度相同，并且使用空格缩进。</p></blockquote><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol><li>修改配置。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt; #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认</th></tr></thead><tbody><tr><td><code>repo</code></td><td>库（Repository）地址</td><td></td></tr><tr><td><code>branch</code></td><td>分支名称</td><td><code>gh-pages</code> (GitHub) <code>coding-pages</code> (Coding.net) <code>master</code> (others)</td></tr><tr><td><code>message</code></td><td>自定义提交信息</td><td><code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr><tr><td><code>token</code></td><td>Optional token value to authenticate with the repo. Prefix with <code>$</code> to read token from environment variable</td><td></td></tr></tbody></table><ol><li>生成站点文件并推送至远程库。执行 <code>hexo clean &amp;&amp; hexo deploy</code>。</li></ol><ul><li>You will be prompted with username and password of the target repository, unless you authenticate with a token or ssh key.</li><li>hexo-deployer-git does not store your username and password. Use <a href="https://git-scm.com/docs/git-credential-cache">git-credential-cache</a> to store them temporarily.</li></ul><ol><li>登入 Github&#x2F;BitBucket&#x2F;Gitlab，请在库设置（Repository Settings）中将默认分支设置为<code>_config.yml</code>配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。</li></ol><h3 id="这一切是如何发生的？"><a href="#这一切是如何发生的？" class="headerlink" title="这一切是如何发生的？"></a>这一切是如何发生的？</h3><p>当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p><blockquote><p>For 使用 Git 管理站点目录的用户</p><p>由于 Hexo 的部署默认使用分支 <code>master</code>，所以如果你同时正在使用 Git 管理你的站点目录，你应当注意你的部署分支应当不同于写作分支。<br>一个好的实践是将站点目录和 Pages 分别存放在两个不同的 Git 仓库中，可以有效避免相互覆盖。<br>Hexo 在部署你的站点生成的文件时并不会更新你的站点目录。因此你应该手动提交并推送你的写作分支。</p></blockquote><p>此外，如果您的 Github Pages 需要使用 CNAME 文件<strong>自定义域名</strong>，请将 CNAME 文件置于 <code>source</code> 目录下，只有这样 <code>hexo deploy</code> 才能将 CNAME 文件一并推送至部署分支。</p><h2 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a>Heroku</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-heroku">hexo-deployer-heroku</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-heroku --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: heroku</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>Heroku 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table><h2 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a>Netlify</h2><p><a href="https://www.netlify.com/">Netlify</a> 是一个提供网络托管的综合平台。它集持续集成（CI）CDN 自定义域名 HTTPS 持续部署（CD）等诸多功能于一身。您可以通过以下两种方式将Hexo站点部署到Netlify。</p><p>首先，也是最通用的方式，就是使用Netlify提供的网页端用户界面。前往<a href="https://app.netlify.com/start">新建一个网站页面</a>，选择需要关联的 Github&#x2F;BitBucket&#x2F;Gitlab 库，然后遵循网站提示。</p><p>另一种方式是使用Netlify提供的命令行客户端工具 <a href="https://www.netlify.com/docs/cli/">Node based CLI</a> 管理和部署您的站点。</p><p>此外，您还可以在项目的README中增加一个 <a href="https://www.netlify.com/docs/deploy-button/">部署至Netlify按钮</a>，这样其他用户在fork或clone了您的项目之后可以方便快捷地一键部署。</p><h2 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-rsync">hexo-deployer-rsync</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: rsync</span><br><span class="line">  host: &lt;host&gt;</span><br><span class="line">  user: &lt;user&gt;</span><br><span class="line">  root: &lt;root&gt;</span><br><span class="line">  port: [port]</span><br><span class="line">  delete: [true|false]</span><br><span class="line">  verbose: [true|false]</span><br><span class="line">  ignore_errors: [true|false]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>root</code></td><td>远程主机的根目录</td><td></td></tr><tr><td><code>port</code></td><td>端口</td><td>22</td></tr><tr><td><code>delete</code></td><td>删除远程主机上的旧文件</td><td>true</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>true</td></tr><tr><td><code>ignore_errors</code></td><td>忽略错误</td><td>false</td></tr></tbody></table><blockquote><p>rsync部署模块的工作方式</p><p>需要注意的是，要求您提供的实际上是一个能通过SSH登陆远程主机的Linux用户。Hexo会自动处理关于rsync使用的一切操作。因此，您需要在远程主机上为您的Hexo站点建立一个用户，并允许其通过SSH登陆。不过，这里的<code>port</code>，的确是指rsync监听的端口，请确保防火墙打开了该端口。</p></blockquote><h2 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a>OpenShift</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-openshift">hexo-deployer-openshift</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-openshift --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: openshift</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>repo</code></td><td>OpenShift 库（Repository）地址</td></tr><tr><td><code>message</code></td><td>自定提交信息 (默认为 <code>Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</code>)</td></tr></tbody></table><h2 id="FTPSync"><a href="#FTPSync" class="headerlink" title="FTPSync"></a>FTPSync</h2><p>安装 <a href="https://github.com/hexojs/hexo-deployer-ftpsync">hexo-deployer-ftpsync</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-ftpsync --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: ftpsync</span><br><span class="line">  host: &lt;host&gt;</span><br><span class="line">  user: &lt;user&gt;</span><br><span class="line">  pass: &lt;password&gt;</span><br><span class="line">  remote: [remote]</span><br><span class="line">  port: [port]</span><br><span class="line">  ignore: [ignore]</span><br><span class="line">  connections: [connections]</span><br><span class="line">  verbose: [true|false]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>pass</code></td><td>密码</td><td></td></tr><tr><td><code>remote</code></td><td>远程主机的根目录</td><td><code>/</code></td></tr><tr><td><code>port</code></td><td>端口</td><td>21</td></tr><tr><td><code>ignore</code></td><td>忽略的文件或目录</td><td></td></tr><tr><td><code>connections</code></td><td>使用的连接数</td><td>1</td></tr><tr><td><code>verbose</code></td><td>显示调试信息</td><td>false</td></tr></tbody></table><blockquote><p>FTP部署可能出现的问题</p><p>您可能需要预先通过其他方式将所有文件上传到远程主机中。否则初次使用ftpsync插件就可能出现报错。另外，由于FTP协议的特征，它每传送一个文件就需要一次握手，相对速度较慢。</p></blockquote><h2 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h2><p>安装 <a href="https://github.com/lucascaro/hexo-deployer-sftp">hexo-deployer-sftp</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-sftp --save</span><br></pre></td></tr></table></figure><p>修改配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: sftp</span><br><span class="line">  host: &lt;host&gt;</span><br><span class="line">  user: &lt;user&gt;</span><br><span class="line">  pass: &lt;password&gt;</span><br><span class="line">  remotePath: [remote path]</span><br><span class="line">  port: [port]</span><br><span class="line">  privateKey: [path/to/privateKey]</span><br><span class="line">  passphrase: [passphrase]</span><br><span class="line">  agent: [path/to/agent/socket]</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>host</code></td><td>远程主机的地址</td><td></td></tr><tr><td><code>user</code></td><td>使用者名称</td><td></td></tr><tr><td><code>pass</code></td><td>密码</td><td></td></tr><tr><td><code>remotePath</code></td><td>远程主机的根目录</td><td><code>/</code></td></tr><tr><td><code>port</code></td><td>端口</td><td>22</td></tr><tr><td><code>privateKey</code></td><td>ssh私钥的目录地址</td><td></td></tr><tr><td><code>passphrase</code></td><td>（可省略）ssh私钥的密码短语</td><td></td></tr><tr><td><code>agent</code></td><td>ssh套接字的目录地址</td><td><code>$SSH_AUTH_SOCK</code></td></tr></tbody></table><h2 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h2><p><a href="https://vercel.com/">Vercel</a> is a cloud platform that enables developers to host Jamstack websites  and web services that deploy instantly, scale automatically, and  requires no supervision, all with zero configuration. They provide a  global edge network, SSL encryption, asset compression, cache  invalidation, and more.</p><p>Step 1: Add a build script to your <code>package.json</code> file:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;hexo generate&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step 2: Deploy your Hexo Website to Vercel</p><p>To deploy your Hexo app with a <a href="https://vercel.com/docs/git-integrations">Vercel for Git Integration</a>, make sure it has been pushed to a Git repository.</p><p>Import the project into Vercel using the <a href="https://vercel.com/import/git">Import Flow</a>. During the import, you will find all relevant options preconfigured for you; however, you can choose to change any of these options, a list of  which can be found <a href="https://vercel.com/docs/build-step#build-&-development-settings">here</a>.</p><p>After your project has been imported, all subsequent pushes to branches will generate <a href="https://vercel.com/docs/platform/deployments#preview">Preview Deployments</a>, and all changes made to the <a href="https://vercel.com/docs/git-integrations#production-branch">Production Branch</a> (commonly “main”) will result in a <a href="https://vercel.com/docs/platform/deployments#production">Production Deployment</a>.</p><p>Alternatively, you can click the deploy button below to create a new project:</p><p><a href="https://vercel.com/new/hexo"><img src="https://vercel.com/button" alt="Deploy Vercel"></a></p><h2 id="21云盒子"><a href="#21云盒子" class="headerlink" title="21云盒子"></a>21云盒子</h2><ol><li>在 <a href="https://www.21yunbox.com/">21云盒子</a> 中， 创建一个新的 <code>静态网页</code>，然后使用以下设置：</li></ol><ul><li><strong>构建命令:</strong> <code>yarn &amp;&amp; hexo deploy</code></li><li><strong>发布目录:</strong> <code>public</code></li></ul><ol><li>点击 “部署” 按钮！</li></ol><p>样例已经部署在 <a href="https://hexo.21yunbox.com/">https://hexo.21yunbox.com/</a>.</p><p>请查看 <a href="https://www.21yunbox.com/docs/#/deploy-hexo">用 21云盒子 部署一个 Hexo 样例</a>.</p><h2 id="Bip"><a href="#Bip" class="headerlink" title="Bip"></a>Bip</h2><p><a href="https://bip.sh/">Bip</a> is a commercial hosting service which provides zero downtime  deployment, a global CDN, SSL, unlimited bandwidth and more for static  websites. Plans are available on a pay as you go, per domain basis.</p><p>Getting started is quick and easy, as Bip provides out the box support for Hexo. This guide assumes you already have <a href="https://bip.sh/getstarted">a Bip domain and Bip CLI installed</a>.</p><p>1: Initialise your project directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bip init</span><br></pre></td></tr></table></figure><p>Follow the prompts, where you’ll be asked which domain you’d like to  deploy to. Bip will detect that you’re using Hexo, and set project  settings like the source file directory automatically.</p><p>2: Deploy your website</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate —deploy &amp;&amp; bip deploy</span><br></pre></td></tr></table></figure><p>After a few moments, your website will be deployed.</p><h2 id="RSS3"><a href="#RSS3" class="headerlink" title="RSS3"></a>RSS3</h2><p><a href="https://rss3.io/">RSS3</a> 是一个为 Web 3.0 时代的内容和社交网络设计的开放协议。</p><ol><li>安装 <a href="https://github.com/NaturalSelectionLabs/hexo-deployer-rss3">hexo-deployer-rss3</a></li><li>修改配置。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deploy: # 所有部署器的根配置块</span><br><span class="line">- type: rss3</span><br><span class="line">  endpoint: https://hub.rss3.io</span><br><span class="line">  privateKey: 47e18d6c386898b424025cd9db446f779ef24ad33a26c499c87bb3d9372540ba</span><br><span class="line">  ipfs:</span><br><span class="line">    deploy: true</span><br><span class="line">    gateway: pinata</span><br><span class="line">    api:</span><br><span class="line">      key: d693df715d3631e489d6</span><br><span class="line">      secret: ee8b74626f12b61c1a4bde3b8c331ad390567c86ba779c9b18561ee92c1cbff0</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>endpoint</code></td><td>一个 RSS3 Hub 的链接</td></tr><tr><td><code>privateKey</code></td><td>您的私钥， 64 字节</td></tr><tr><td><code>ipfs/deploy</code></td><td>是否部署到 IPFS 上</td></tr><tr><td><code>ipfs/gateway</code></td><td>IPFS API 网关</td></tr><tr><td><code>ipfs/api/key</code></td><td>IPFS 网关相关的验证内容</td></tr><tr><td><code>ipfs/api/secret</code></td><td>IPFS 网关相关的验证内容</td></tr></tbody></table><ol><li>生成静态文件</li><li>部署</li></ol><p>关于具体部署相关的注意事项，您可以参阅 <a href="https://github.com/NaturalSelectionLabs/hexo-deployer-rss3/tree/develop/docs/zh_CN/start.md">我们的文档</a> 。</p><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><p>Hexo 生成的所有文件都放在 <code>public</code> 文件夹中，您可以将它们复制到您喜欢的地方。</p><hr><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a><strong>自定义</strong></h1><hr><h1 id="永久链接（Permalinks）"><a href="#永久链接（Permalinks）" class="headerlink" title="永久链接（Permalinks）"></a>永久链接（Permalinks）</h1><p>您可以在 <code>_config.yml</code> 配置中调整网站的永久链接或者在每篇文章的 Front-matter 中指定。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>除了下列变量外，您还可使用 Front-matter 中的所有属性。</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td><code>:year</code></td><td>文章的发表年份（4 位数）</td></tr><tr><td><code>:month</code></td><td>文章的发表月份（2 位数）</td></tr><tr><td><code>:i_month</code></td><td>文章的发表月份（去掉开头的零）</td></tr><tr><td><code>:day</code></td><td>文章的发表日期 (2 位数)</td></tr><tr><td><code>:i_day</code></td><td>文章的发表日期（去掉开头的零）</td></tr><tr><td><code>:hour</code></td><td>文章发表时的小时 (2 位数)</td></tr><tr><td><code>:minute</code></td><td>文章发表时的分钟 (2 位数)</td></tr><tr><td><code>:second</code></td><td>文章发表时的秒钟 (2 位数)</td></tr><tr><td><code>:title</code></td><td>文件名称 (relative to “source&#x2F;_posts&#x2F;“ folder)</td></tr><tr><td><code>:name</code></td><td>文件名称</td></tr><tr><td><code>:post_title</code></td><td>文章标题</td></tr><tr><td><code>:id</code></td><td>文章 ID (<em>not persistent across <a href="https://hexo.io/zh-cn/docs/commands#clean">cache reset</a></em>)</td></tr><tr><td><code>:category</code></td><td>分类。如果文章没有分类，则是 <code>default_category</code> 配置信息。</td></tr><tr><td><code>:hash</code></td><td>SHA1 hash of filename (same as <code>:title</code>) and date (12-hexadecimal)</td></tr></tbody></table><p>您可在 <code>permalink_defaults</code> 参数下调整永久链接中各变量的默认值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permalink_defaults:</span><br><span class="line">  lang: en</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/hello-world.mdtitle: Hello World</span><br><span class="line">date: 2013-07-14 17:01:34</span><br><span class="line">categories:</span><br><span class="line">- foo</span><br><span class="line">- bar</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world&#x2F;</td></tr><tr><td><code>:year-:month-:day-:title.html</code></td><td>2013-07-14-hello-world.html</td></tr><tr><td><code>:category/:title/</code></td><td>foo&#x2F;bar&#x2F;hello-world&#x2F;</td></tr><tr><td><code>:title-:hash/</code></td><td>hello-world-a2c8ac003b43&#x2F;</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source/_posts/lorem/hello-world.mdtitle: Hello World</span><br><span class="line">date: 2013-07-14 17:01:34</span><br><span class="line">categories:</span><br><span class="line">- foo</span><br><span class="line">- bar</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td><code>:year/:month/:day/:title/</code></td><td>2013&#x2F;07&#x2F;14&#x2F;lorem&#x2F;hello-world&#x2F;</td></tr><tr><td><code>:year/:month/:day/:name/</code></td><td>2013&#x2F;07&#x2F;14&#x2F;hello-world&#x2F;</td></tr></tbody></table><h3 id="多语种支持"><a href="#多语种支持" class="headerlink" title="多语种支持"></a>多语种支持</h3><p>若要建立一个多语种的网站，您可修改 <code>new_post_name</code> 和 <code>permalink</code> 参数，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :lang/:title.md</span><br><span class="line">permalink: :lang/:title/</span><br></pre></td></tr></table></figure><p>当您建立新文章时，文章会被储存到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;Hello World&quot; --lang tw</span><br><span class="line"># =&gt; source/_posts/tw/Hello-World.md</span><br></pre></td></tr></table></figure><p>而网址会是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/tw/hello-world/</span><br></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure><h3 id="config-yml-1"><a href="#config-yml-1" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>主题的配置文件。和 Hexo 配置文件不同，主题配置文件修改时会自动更新，无需重启 Hexo Server。</p><h3 id="languages"><a href="#languages" class="headerlink" title="languages"></a>languages</h3><p>语言文件夹。请参见 <a href="https://hexo.io/zh-cn/docs/internationalization">国际化 (i18n)</a>。</p><h3 id="layout"><a href="#layout" class="headerlink" title="layout"></a>layout</h3><p>布局文件夹。用于存放主题的模板文件，决定了网站内容的呈现方式，Hexo 内建 <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> 模板引擎，您可以另外安装插件来获得 <a href="https://github.com/hexojs/hexo-renderer-ejs">EJS</a>、<a href="https://github.com/hexojs/hexo-renderer-haml">Haml</a>、<a href="https://github.com/hexojs/hexo-renderer-jade">Jade</a> 或 <a href="https://github.com/maxknee/hexo-render-pug">Pug</a> 支持，Hexo 根据模板文件的扩展名来决定所使用的模板引擎，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">layout.ejs   - 使用 EJS</span><br><span class="line">layout.swig  - 使用 Swig</span><br></pre></td></tr></table></figure><p>您可参考 <a href="https://hexo.io/zh-cn/docs/templates">模板</a> 以获得更多信息。</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>脚本文件夹。在启动时，Hexo 会载入此文件夹内的 JavaScript 文件，请参见 <a href="https://hexo.io/zh-cn/docs/plugins">插件</a> 以获得更多信息。</p><h3 id="source-1"><a href="#source-1" class="headerlink" title="source"></a>source</h3><p>资源文件夹，除了模板以外的 Asset，例如 CSS、JavaScript 文件等，都应该放在这个文件夹中。文件或文件夹开头名称为 <code>_</code>（下划线线）或隐藏的文件会被忽略。</p><p>如果文件可以被渲染的话，会经过解析然后储存到 <code>public</code> 文件夹，否则会直接拷贝到 <code>public</code> 文件夹。</p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>当您完成主题后，可以考虑将它发布到 <a href="https://hexo.io/themes">主题列表</a>，让更多人能够使用您的主题。在发布前建议先进行 <a href="https://github.com/hexojs/hexo-theme-unit-test">主题单元测试</a>，确保每一项功能都能正常使用。发布主题的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#%E6%9B%B4%E6%96%B0%E6%96%87%E6%A1%A3">更新文档</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/&lt;username&gt;/site.git</span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/themes.yml</code>，在文件中新增您的主题，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- name: landscape</span><br><span class="line">  description: A brand new default theme for Hexo.</span><br><span class="line">  link: https://github.com/hexojs/hexo-theme-landscape</span><br><span class="line">  preview: http://hexo.io/hexo-theme-landscape</span><br><span class="line">  tags:</span><br><span class="line">    - official</span><br><span class="line">    - responsive</span><br><span class="line">    - widget</span><br><span class="line">    - two_column</span><br><span class="line">    - one_column</span><br></pre></td></tr></table></figure></li><li><p>在 <code>source/themes/screenshots</code> 新增同名的截图档案，图片必须为 800x500 的 PNG 文件。</p></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><p>模板决定了网站内容的呈现方式，每个主题至少都应包含一个 <code>index</code> 模板，以下是各页面相对应的模板名称：</p><table><thead><tr><th>模板</th><th>用途</th><th>回退</th></tr></thead><tbody><tr><td><code>index</code></td><td>首页</td><td></td></tr><tr><td><code>post</code></td><td>文章</td><td><code>index</code></td></tr><tr><td><code>page</code></td><td>分页</td><td><code>index</code></td></tr><tr><td><code>archive</code></td><td>归档</td><td><code>index</code></td></tr><tr><td><code>category</code></td><td>分类归档</td><td><code>archive</code></td></tr><tr><td><code>tag</code></td><td>标签归档</td><td><code>archive</code></td></tr></tbody></table><h2 id="布局（Layout）-1"><a href="#布局（Layout）-1" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>如果页面结构类似，例如两个模板都有页首（Header）和页脚（Footer），您可考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 <code>body</code> 变量的内容，如此一来模板的内容才会被显示，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index.ejsindex</span><br><span class="line">layout.ejs&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;index&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>每个模板都默认使用 <code>layout</code> 布局，您可在 front-matter 指定其他布局，或是设为 <code>false</code> 来关闭布局功能，您甚至可在布局中再使用其他布局来建立嵌套布局。</p><h2 id="局部模版（Partial）"><a href="#局部模版（Partial）" class="headerlink" title="局部模版（Partial）"></a>局部模版（Partial）</h2><p>局部模板让您在不同模板之间共享相同的组件，例如页首（Header）、页脚（Footer）或侧边栏（Sidebar）等，可利用局部模板功能分割为个别文件，让维护更加便利。举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">partial/header.ejs&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</span><br><span class="line">index.ejs&lt;%- partial(&#x27;partial/header&#x27;) %&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>您可以在局部模板中指定局部变量并使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">partial/header.ejs&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title %&gt;&lt;/h1&gt;</span><br><span class="line">index.ejs&lt;%- partial(&#x27;partial/header&#x27;, &#123;title: &#x27;Hello World&#x27;&#125;) %&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。</p><p>本功能借鉴于 <a href="http://guides.rubyonrails.org/caching_with_rails.html#fragment-caching">Ruby on Rails</a>，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。</p><p>它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#x27;header&#x27;, function()&#123;</span><br><span class="line">  return &#x27;&lt;header&gt;&lt;/header&gt;&#x27;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果您使用局部模板的话，可以更简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&#x27;header&#x27;, &#123;&#125;, &#123;cache: true&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>fragment_cache()</code> 将会缓存第一次的渲染结果，并在之后直接输出缓存的结果。因此只有在不同页面的渲染结果都相同时才应使用局部缓存。<br>比如，在配置中启用了 <code>relative_link</code> 后不应该使用局部缓存，因为相对链接在每个页面可能不同。</p></blockquote><h1 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h1><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>site</code></td><td><a href="https://hexo.io/zh-cn/docs/variables#%E7%BD%91%E7%AB%99%E5%8F%98%E9%87%8F">网站变量</a></td><td><code>object</code>; 见 <a href="https://hexo.io/zh-cn/docs/variables#%E7%BD%91%E7%AB%99%E5%8F%98%E9%87%8F">网站变量</a></td></tr><tr><td><code>page</code></td><td>针对该页面的内容以及 front-matter 中自定义的变量。</td><td><code>object</code>; 见 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F">页面变量</a></td></tr><tr><td><code>config</code></td><td>网站配置</td><td><code>object</code> (站点的配置文件)</td></tr><tr><td><code>theme</code></td><td>主题配置。继承自网站配置。</td><td><code>object</code> (主题配置文件)</td></tr><tr><td><code>path</code></td><td>当前页面的路径（不含根路径）</td><td><code>string</code></td></tr><tr><td><code>url</code></td><td>当前页面的完整网址</td><td><code>string</code></td></tr><tr><td><code>env</code></td><td>环境变量</td><td>???</td></tr></tbody></table><blockquote><p>从 Hexo 5.0.0 开始，Lodash 已从全局变量中移除。迁移时 <a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore">You-Dont-Need-Lodash-Underscore</a> 或许能为你提供帮助。</p></blockquote><h3 id="网站变量"><a href="#网站变量" class="headerlink" title="网站变量"></a>网站变量</h3><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>site.posts</code></td><td>所有文章</td><td><code>array</code> of <code>post</code> objects</td></tr><tr><td><code>site.pages</code></td><td>所有分页</td><td><code>array</code> of <code>page</code> objects</td></tr><tr><td><code>site.categories</code></td><td>所有分类</td><td><code>object</code>，包含了站点全部的分类</td></tr><tr><td><code>site.tags</code></td><td>所有标签</td><td><code>array</code>，包含了站点全部的标签</td></tr></tbody></table><h3 id="页面变量"><a href="#页面变量" class="headerlink" title="页面变量"></a>页面变量</h3><p><strong>页面（<code>page</code>）</strong></p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.title</code></td><td>页面标题</td><td><code>string</code></td></tr><tr><td><code>page.date</code></td><td>页面建立日期</td><td>[Moment.js] 对象</td></tr><tr><td><code>page.updated</code></td><td>页面更新日期</td><td>[Moment.js] 对象</td></tr><tr><td><code>page.comments</code></td><td>留言是否开启</td><td><code>boolean</code></td></tr><tr><td><code>page.layout</code></td><td>布局名称</td><td><code>string</code></td></tr><tr><td><code>page.content</code></td><td>页面的完整内容</td><td><code>string</code></td></tr><tr><td><code>page.excerpt</code></td><td>页面摘要</td><td><code>string</code></td></tr><tr><td><code>page.more</code></td><td>除了页面摘要的其余内容</td><td><code>string</code></td></tr><tr><td><code>page.source</code></td><td>页面原始路径</td><td><code>string</code></td></tr><tr><td><code>page.full_source</code></td><td>页面的完整原始路径</td><td><code>string</code></td></tr><tr><td><code>page.path</code></td><td>页面网址（不含根路径）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td><td><code>string</code></td></tr><tr><td><code>page.permalink</code></td><td>页面的完整网址</td><td><code>string</code></td></tr><tr><td><code>page.prev</code></td><td>上一个页面。如果此为第一个页面则为 <code>null</code>。</td><td><code>string</code> or <code>null</code></td></tr><tr><td><code>page.next</code></td><td>下一个页面。如果此为最后一个页面则为 <code>null</code>。</td><td><code>string</code> or <code>null</code></td></tr><tr><td><code>page.raw</code></td><td>文章的原始内容</td><td>???</td></tr><tr><td><code>page.photos</code></td><td>文章的照片（用于相簿）</td><td><code>array</code></td></tr><tr><td><code>page.link</code></td><td>文章的外部链接（用于链接文章）</td><td><code>string</code></td></tr></tbody></table><p><strong>文章 (<code>post</code>):</strong> 与 <code>page</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.published</code></td><td>如果该文章已发布则为 true</td><td><code>boolean</code></td></tr><tr><td><code>page.categories</code></td><td>该文章的所有分类</td><td><code>array</code> of ???</td></tr><tr><td><code>page.tags</code></td><td>该文章的所有标签</td><td><code>array</code> of ???</td></tr></tbody></table><p><strong>首页（<code>index</code>）</strong></p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.per_page</code></td><td>每页显示的文章数量</td><td><code>number</code></td></tr><tr><td><code>page.total</code></td><td>总页数</td><td><code>number</code></td></tr><tr><td><code>page.current</code></td><td>目前页数</td><td><code>number</code></td></tr><tr><td><code>page.current_url</code></td><td>目前分页的网址</td><td><code>string</code></td></tr><tr><td><code>page.posts</code></td><td>本页文章 (<a href="https://hexojs.github.io/warehouse/">Data Model</a>)</td><td><code>object</code></td></tr><tr><td><code>page.prev</code></td><td>上一页的页数。如果此页是第一页的话则为 <code>0</code>。</td><td><code>number</code></td></tr><tr><td><code>page.prev_link</code></td><td>上一页的网址。如果此页是第一页的话则为 <code>&#39;&#39;</code>。</td><td><code>string</code></td></tr><tr><td><code>page.next</code></td><td>下一页的页数。如果此页是最后一页的话则为 <code>0</code>。</td><td><code>number</code></td></tr><tr><td><code>page.next_link</code></td><td>下一页的网址。如果此页是最后一页的话则为 <code>&#39;&#39;</code>。</td><td><code>string</code></td></tr><tr><td><code>page.path</code></td><td>当前页面的路径（不含根目录）。我们通常在主题中使用 <code>url_for(page.path)</code>。</td><td><code>string</code></td></tr></tbody></table><p>**归档 (<code>archive</code>)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.archive</code></td><td>等于 <code>true</code></td><td><code>boolean</code></td></tr><tr><td><code>page.year</code></td><td>年份归档 (4位)</td><td><code>number</code></td></tr><tr><td><code>page.month</code></td><td>月份归档 (没有前导零的2位数)</td><td><code>number</code></td></tr></tbody></table><p>**分类 (<code>category</code>)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.category</code></td><td>分类名称</td><td><code>string</code></td></tr></tbody></table><p>**标签 (<code>tag</code>)**：与 <code>index</code> 布局相同，但新增以下变量。</p><table><thead><tr><th>变量</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td><code>page.tag</code></td><td>标签名称</td><td><code>string</code></td></tr></tbody></table><h1 id="辅助函数（Helpers）"><a href="#辅助函数（Helpers）" class="headerlink" title="辅助函数（Helpers）"></a>辅助函数（Helpers）</h1><p>辅助函数帮助您在模版中快速插入内容。辅助函数不能在源文件中使用。</p><h2 id="网址-2"><a href="#网址-2" class="headerlink" title="网址"></a>网址</h2><h3 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h3><p>在路径前加上根路径，从 Hexo 2.7 开始您应该使用此函数而不是 <code>config.root + path</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- url_for(path, [option]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>relative</code></td><td>是否输出相对链接</td><td><code>config.relative_link</code> 的值</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">root: /blog/</span><br><span class="line">&lt;%- url_for(&#x27;/a/path&#x27;) %&gt;</span><br><span class="line">// /blog/a/path</span><br></pre></td></tr></table></figure><p>是否输出相对链接，默认遵循配置文件中 <code>relative_link</code> 的值<br>例如， post&#x2F;page 的相对路径值可能是 <code>/foo/bar/index.html</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">relative_link: true</span><br><span class="line">&lt;%- url_for(&#x27;/css/style.css&#x27;) %&gt;</span><br><span class="line">// ../../css/style.css</span><br><span class="line">/* 覆盖配置</span><br><span class="line"> * 即使配置文件中启用了 relative_link，你也可以使用 relative 参数禁用相对链接输出，反之亦然</span><br><span class="line"> */</span><br><span class="line">&lt;%- url_for(&#x27;/css/style.css&#x27;, &#123;relative: false&#125;) %&gt;</span><br><span class="line">// /css/style.css</span><br></pre></td></tr></table></figure><h3 id="relative-url"><a href="#relative-url" class="headerlink" title="relative_url"></a>relative_url</h3><p>取得与 <code>from</code> 相对的 <code>to</code> 路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- relative_url(from, to) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- relative_url(&#x27;foo/bar/&#x27;, &#x27;css/style.css&#x27;) %&gt;</span><br><span class="line">// ../../css/style.css</span><br></pre></td></tr></table></figure><h3 id="gravatar"><a href="#gravatar" class="headerlink" title="gravatar"></a>gravatar</h3><p>根据邮箱地址返回 Gravatar 头像 URL。</p><p>如果你不指定 <code>options</code> 参数，将会应用默认参数。否则，你可以将其设置为一个数字，这个数字将会作为 Gravatar 的大小参数。最后，如果你设置它一个对象，它将会被转换为 Gravatar 的一个查询字符串参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(email, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>s</code></td><td>图片大小</td><td>80</td></tr><tr><td><code>d</code></td><td>默认头像</td><td></td></tr><tr><td><code>f</code></td><td>强制使用默认图象</td><td></td></tr><tr><td><code>r</code></td><td>头像等级限制</td><td></td></tr></tbody></table><p>访问 <a href="https://en.gravatar.com/site/implement/images/">Gravatar</a> 了解更多。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line">// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787</span><br><span class="line"></span><br><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27;, 40) %&gt;</span><br><span class="line">// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40</span><br><span class="line"></span><br><span class="line">&lt;%- gravatar(&#x27;a@abc.com&#x27; &#123;s: 40, d: &#x27;https://via.placeholder.com/150&#x27;&#125;) %&gt;</span><br><span class="line">// https://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40&amp;d=https%3A%2F%2Fvia.placeholder.com%2F150</span><br></pre></td></tr></table></figure><h3 id="full-url-for"><a href="#full-url-for" class="headerlink" title="full_url_for"></a>full_url_for</h3><p>在路径前加上根路径和域名。输出会被自动转码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_url_for(path) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">url: https://example.com/blog # example</span><br><span class="line">&lt;%- full_url_for(&#x27;/a/path&#x27;) %&gt;</span><br><span class="line">// https://example.com/blog/a/path</span><br></pre></td></tr></table></figure><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>载入 CSS 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.css</code> 扩展名的话，也会自动加上。Use object type for custom attributes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(&#x27;style.css&#x27;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- css([&#x27;style.css&#x27;, &#x27;screen.css&#x27;]) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- css(&#123; href: &#x27;style.css&#x27;, integrity: &#x27;foo&#x27; &#125;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; integrity=&quot;foo&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- css([&#123; href: &#x27;style.css&#x27;, integrity: &#x27;foo&#x27; &#125;, &#123; href: &#x27;screen.css&#x27;, integrity: &#x27;bar&#x27; &#125;]) %&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; integrity=&quot;foo&quot;&gt;</span><br><span class="line">// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; integrity=&quot;bar&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><p>载入 JavaScript 文件。<code>path</code> 可以是数组或字符串，如果 <code>path</code> 开头不是 <code>/</code> 或任何协议，则会自动加上根路径；如果后面没有加上 <code>.js</code> 扩展名的话，也会自动加上。Use object type for custom attributes.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(path, ...) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- js(&#x27;script.js&#x27;) %&gt;</span><br><span class="line">// &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- js([&#x27;script.js&#x27;, &#x27;gallery.js&#x27;]) %&gt;</span><br><span class="line">// &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">// &lt;script src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- js(&#123; src: &#x27;script.js&#x27;, integrity: &#x27;foo&#x27;, async: true &#125;) %&gt;</span><br><span class="line">// &lt;script src=&quot;/script.js&quot; integrity=&quot;foo&quot; async&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- js([&#123; src: &#x27;script.js&#x27;, integrity: &#x27;foo&#x27; &#125;, &#123; src: &#x27;gallery.js&#x27;, integrity: &#x27;bar&#x27; &#125;]) %&gt;</span><br><span class="line">// &lt;script src=&quot;/script.js&quot; integrity=&quot;foo&quot;&gt;&lt;/script&gt;</span><br><span class="line">// &lt;script src=&quot;/gallery.js&quot; integrity=&quot;bar&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="link-to"><a href="#link-to" class="headerlink" title="link_to"></a>link_to</h3><p>插入链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>external</code></td><td>在新视窗打开链接</td><td>false</td></tr><tr><td><code>class</code></td><td>Class 名称</td><td></td></tr><tr><td><code>id</code></td><td>ID</td><td></td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- link_to(&#x27;http://www.google.com&#x27;, &#x27;Google&#x27;, &#123;external: true&#125;) %&gt;</span><br><span class="line">// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="mail-to"><a href="#mail-to" class="headerlink" title="mail_to"></a>mail_to</h3><p>插入电子邮箱链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(path, [text], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>class</code></td><td>Class 名称</td></tr><tr><td><code>id</code></td><td>ID</td></tr><tr><td><code>subject</code></td><td>邮件主题</td></tr><tr><td><code>cc</code></td><td>抄送（CC）</td></tr><tr><td><code>bcc</code></td><td>密送（BCC）</td></tr><tr><td><code>body</code></td><td>邮件内容</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- mail_to(&#x27;a@abc.com&#x27;, &#x27;Email&#x27;) %&gt;</span><br><span class="line">// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="image-tag"><a href="#image-tag" class="headerlink" title="image_tag"></a>image_tag</h3><p>插入图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- image_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>alt</code></td><td>图片的替代文字</td></tr><tr><td><code>class</code></td><td>Class 名称</td></tr><tr><td><code>id</code></td><td>ID</td></tr><tr><td><code>width</code></td><td>图片宽度</td></tr><tr><td><code>height</code></td><td>图片高度</td></tr></tbody></table><h3 id="favicon-tag"><a href="#favicon-tag" class="headerlink" title="favicon_tag"></a>favicon_tag</h3><p>插入 favicon。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- favicon_tag(path) %&gt;</span><br></pre></td></tr></table></figure><h3 id="feed-tag"><a href="#feed-tag" class="headerlink" title="feed_tag"></a>feed_tag</h3><p>插入 feed 链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- feed_tag(path, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>Feed 标题</td><td><code>config.title</code></td></tr><tr><td><code>type</code></td><td>Feed 类型</td><td>atom</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- feed_tag(&#x27;atom.xml&#x27;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;alternate&quot; href=&quot;/atom.xml&quot; title=&quot;Hexo&quot; type=&quot;application/atom+xml&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;%- feed_tag(&#x27;rss.xml&#x27;, &#123; title: &#x27;RSS Feed&#x27;, type: &#x27;rss&#x27; &#125;) %&gt;</span><br><span class="line">// &lt;link rel=&quot;alternate&quot; href=&quot;/atom.xml&quot; title=&quot;RSS Feed&quot; type=&quot;application/rss+xml&quot;&gt;</span><br><span class="line"></span><br><span class="line">/* Defaults to hexo-generator-feed&#x27;s config if no argument */</span><br><span class="line">&lt;%- feed_tag() %&gt;</span><br><span class="line">// &lt;link rel=&quot;alternate&quot; href=&quot;/atom.xml&quot; title=&quot;Hexo&quot; type=&quot;application/atom+xml&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h2><h3 id="is-current"><a href="#is-current" class="headerlink" title="is_current"></a>is_current</h3><p>检查 <code>path</code> 是否符合目前页面的网址。开启 <code>strict</code> 选项启用严格比对。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_current(path, [strict]) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-home"><a href="#is-home" class="headerlink" title="is_home"></a>is_home</h3><p>检查当前页面是否为首页。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_home() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-post"><a href="#is-post" class="headerlink" title="is_post"></a>is_post</h3><p>检查当前页面是否为文章。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_post() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-page"><a href="#is-page" class="headerlink" title="is_page"></a>is_page</h3><p>检查当前页面是否为独立页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_page() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-archive"><a href="#is-archive" class="headerlink" title="is_archive"></a>is_archive</h3><p>检查当前页面是否为存档页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_archive() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-year"><a href="#is-year" class="headerlink" title="is_year"></a>is_year</h3><p>检查当前页面是否为年度归档页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_year() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-month"><a href="#is-month" class="headerlink" title="is_month"></a>is_month</h3><p>检查当前页面是否为月度归档页面。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_month() %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-category"><a href="#is-category" class="headerlink" title="is_category"></a>is_category</h3><p>检查当前页面是否为分类归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定分类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_category() %&gt;</span><br><span class="line">&lt;%- is_category(&#x27;hobby&#x27;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="is-tag"><a href="#is-tag" class="headerlink" title="is_tag"></a>is_tag</h3><p>检查当前页面是否为标签归档页面。<br>如果给定一个字符串作为参数，将会检查目前是否为指定标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- is_tag() %&gt;</span><br><span class="line">&lt;%- is_tag(&#x27;hobby&#x27;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>清除字符串开头和结尾的空格。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- trim(string) %&gt;</span><br></pre></td></tr></table></figure><h3 id="strip-html"><a href="#strip-html" class="headerlink" title="strip_html"></a>strip_html</h3><p>清除字符串中的 HTML 标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- strip_html(&#x27;It\&#x27;s not &lt;b&gt;important&lt;/b&gt; anymore!&#x27;) %&gt;</span><br><span class="line">// It&#x27;s not important anymore!</span><br></pre></td></tr></table></figure><h3 id="titlecase"><a href="#titlecase" class="headerlink" title="titlecase"></a>titlecase</h3><p>把字符串转换为正确的 Title case。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(string) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- titlecase(&#x27;this is an apple&#x27;) %&gt;</span><br><span class="line"># This is an Apple</span><br></pre></td></tr></table></figure><h3 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h3><p>使用 Markdown 解析字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(str) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- markdown(&#x27;make me **strong**&#x27;) %&gt;</span><br><span class="line">// make me &lt;strong&gt;strong&lt;/strong&gt;</span><br></pre></td></tr></table></figure><h3 id="render-1"><a href="#render-1" class="headerlink" title="render"></a>render</h3><p>解析字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- render(str, engine, [options]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- render(&#x27;p(class=&quot;example&quot;) Test&#x27;, &#x27;pug&#x27;); %&gt;</span><br><span class="line">// &lt;p class=&quot;example&quot;&gt;Test&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>See <a href="https://hexo.io/zh-cn/api/rendering">Rendering</a> for more details.</p><h3 id="word-wrap"><a href="#word-wrap" class="headerlink" title="word_wrap"></a>word_wrap</h3><p>使每行的字符串长度不超过 <code>length</code>。<code>length</code> 预设为 80。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(str, [length]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- word_wrap(&#x27;Once upon a time&#x27;, 8) %&gt;</span><br><span class="line">// Once upon\n a time</span><br></pre></td></tr></table></figure><h3 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h3><p>移除超过 <code>length</code> 长度的字符串。<code>length</code> 的默认值是 30。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(text, length) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- truncate(&#x27;Once upon a time in a world far far away&#x27;, &#123;length: 17&#125;) %&gt;</span><br><span class="line">// Once upon a ti...</span><br><span class="line"></span><br><span class="line">&lt;%- truncate(&#x27;Once upon a time in a world far far away&#x27;, &#123;length: 17, separator: &#x27; &#x27;&#125;) %&gt;</span><br><span class="line">// Once upon a...</span><br><span class="line"></span><br><span class="line">&lt;%- truncate(&#x27;And they found that many people were sleeping better.&#x27;, &#123;length: 25, omission: &#x27;... (continued)&#x27;&#125;) %&gt;</span><br><span class="line">// And they f... (continued)</span><br></pre></td></tr></table></figure><h3 id="escape-html"><a href="#escape-html" class="headerlink" title="escape_html"></a>escape_html</h3><p>Escapes HTML entities in a string.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- escape_html(str) %&gt;</span><br></pre></td></tr></table></figure><p><strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- escape_html(&#x27;&lt;p&gt;Hello &quot;world&quot;.&lt;/p&gt;&#x27;) %&gt;</span><br><span class="line">// &amp;lt;p&amp;gt;Hello &amp;quot;world&amp;quot;.&amp;lt;&amp;#x2F;p&amp;gt;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h3><p>载入其他模板文件，您可在 <code>locals</code> 设定区域变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(layout, [locals], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>cache</code></td><td>缓存（使用 Fragment cache）</td><td><code>false</code></td></tr><tr><td><code>only</code></td><td>限制局部变量。在模板中只能使用 <code>locals</code> 中设定的变量。</td><td><code>false</code></td></tr></tbody></table><h3 id="fragment-cache"><a href="#fragment-cache" class="headerlink" title="fragment_cache"></a>fragment_cache</h3><p>局部缓存。它储存局部内容，下次使用时就能直接使用缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(id, fn);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- fragment_cache(&#x27;header&#x27;, function()&#123;</span><br><span class="line">  return &#x27;&lt;header&gt;&lt;/header&gt;&#x27;;</span><br><span class="line">&#125;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="日期与时间"><a href="#日期与时间" class="headerlink" title="日期与时间"></a>日期与时间</h2><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>插入格式化的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format</code> 配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date(Date.now()) %&gt;</span><br><span class="line">// 2013-01-01</span><br><span class="line"></span><br><span class="line">&lt;%- date(Date.now(), &#x27;YYYY/M/D&#x27;) %&gt;</span><br><span class="line">// Jan 1 2013</span><br></pre></td></tr></table></figure><h3 id="date-xml"><a href="#date-xml" class="headerlink" title="date_xml"></a>date_xml</h3><p>插入 XML 格式的日期。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(date) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- date_xml(Date.now()) %&gt;</span><br><span class="line">// 2013-01-01T00:00:00.000Z</span><br></pre></td></tr></table></figure><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><p>插入格式化的时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>time_format</code> 配置信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- time(Date.now()) %&gt;</span><br><span class="line">// 13:05:12</span><br><span class="line"></span><br><span class="line">&lt;%- time(Date.now(), &#x27;h:mm:ss a&#x27;) %&gt;</span><br><span class="line">// 1:05:12 pm</span><br></pre></td></tr></table></figure><h3 id="full-date"><a href="#full-date" class="headerlink" title="full_date"></a>full_date</h3><p>插入格式化的日期和时间。<code>date</code> 可以是 UNIX 时间、ISO 字符串、Date 对象或 <a href="http://momentjs.com/">Moment.js</a> 对象。<code>format</code> 默认为 <code>date_format + time_format</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(date, [format]) %&gt;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- full_date(new Date()) %&gt;</span><br><span class="line">// Jan 1, 2013 0:00:00</span><br><span class="line"></span><br><span class="line">&lt;%- full_date(new Date(), &#x27;dddd, MMMM Do YYYY, h:mm:ss a&#x27;) %&gt;</span><br><span class="line">// Tuesday, January 1st 2013, 12:00:00 am</span><br></pre></td></tr></table></figure><h3 id="moment"><a href="#moment" class="headerlink" title="moment"></a>moment</h3><p><a href="http://momentjs.com/">Moment.js</a> 函数库。</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="list-categories"><a href="#list-categories" class="headerlink" title="list_categories"></a>list_categories</h3><p>插入分类列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_categories([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>分类排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>分类排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个分类的文章总数</td><td>true</td></tr><tr><td><code>style</code></td><td>分类列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>分类间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>depth</code></td><td>要显示的分类层级。<code>0</code> 显示所有层级的分类；<code>-1</code> 和 <code>0</code> 很类似，但是显示不分层级；<code>1</code> 只显示第一层的分类。</td><td>0</td></tr><tr><td><code>class</code></td><td>分类列表的 class 名称。</td><td>category</td></tr><tr><td><code>transform</code></td><td>改变分类名称显示方法的函数</td><td></td></tr><tr><td><code>suffix</code></td><td>为链接添加前缀</td><td>None</td></tr></tbody></table><p><strong>用例:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_categories(post.categories, &#123;</span><br><span class="line">  class: &#x27;post-category&#x27;,</span><br><span class="line">  transform(str) &#123;</span><br><span class="line">    return titlecase(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;) %&gt;</span><br><span class="line"> &lt;%- list_categories(post.categories, &#123;</span><br><span class="line">  class: &#x27;post-category&#x27;,</span><br><span class="line">  transform(str) &#123;</span><br><span class="line">    return str.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="list-tags"><a href="#list-tags" class="headerlink" title="list_tags"></a>list_tags</h3><p>插入标签列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_tags([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>描述</th><th>预设值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>标签排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>标签排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个标签的文章总数</td><td>true</td></tr><tr><td><code>style</code></td><td>标签列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>标签间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>Class name of tag list (string) or customize each tag’s class (object, see below).</td><td>tag</td></tr><tr><td><code>transform</code></td><td>改变标签名称显示方法的函数。请查看 <a href="https://hexo.io/zh-cn/docs/helpers#list-categories">list_categories</a> 中给出的例子</td><td></td></tr><tr><td><code>amount</code></td><td>要显示的标签数量（0 &#x3D; 无限制）</td><td>0</td></tr><tr><td><code>suffix</code></td><td>为链接添加前缀</td><td>None</td></tr></tbody></table><p>Class advanced customization:</p><table><thead><tr><th>Option</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td><code>class.ul</code></td><td><code>&lt;ul&gt;</code> class name (only for style <code>list</code>)</td><td><code>tag-list</code> (list style)</td></tr><tr><td><code>class.li</code></td><td><code>&lt;li&gt;</code> class name (only for style <code>list</code>)</td><td><code>tag-list-item</code> (list style)</td></tr><tr><td><code>class.a</code></td><td><code>&lt;a&gt;</code> class name</td><td><code>tag-list-link</code> (list style) <code>tag-link</code> (normal style)</td></tr><tr><td><code>class.label</code></td><td><code>&lt;span&gt;</code> class name where the tag label is stored (only for normal style, when <code>class.label</code> is set the label is put in a <code>&lt;span&gt;</code>)</td><td><code>tag-label</code> (normal style)</td></tr><tr><td><code>class.count</code></td><td><code>&lt;span&gt;</code> class name where the tag counter is stored (only when <code>show_count</code> is <code>true</code>)</td><td><code>tag-list-count</code> (list style) <code>tag-count</code> (normal style)</td></tr></tbody></table><p>Examples:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_tags(site.tags, &#123;class: &#x27;classtest&#x27;, style: false, separator: &#x27; | &#x27;&#125;) %&gt;</span><br><span class="line">&lt;%- list_tags(site.tags, &#123;class: &#x27;classtest&#x27;, style: &#x27;list&#x27;&#125;) %&gt;</span><br><span class="line">&lt;%- list_tags(site.tags, &#123;class: &#123;ul: &#x27;ululul&#x27;, li: &#x27;lilili&#x27;, a: &#x27;aaa&#x27;, count: &#x27;ccc&#x27;&#125;, style: false, separator: &#x27; | &#x27;&#125;) %&gt;</span><br><span class="line">&lt;%- list_tags(site.tags, &#123;class: &#123;ul: &#x27;ululul&#x27;, li: &#x27;lilili&#x27;, a: &#x27;aaa&#x27;, count: &#x27;ccc&#x27;&#125;, style: &#x27;list&#x27;&#125;) %&gt;</span><br></pre></td></tr></table></figure><h3 id="list-archives"><a href="#list-archives" class="headerlink" title="list_archives"></a>list_archives</h3><p>插入归档列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_archives([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>type</code></td><td>类型。此设定可为 <code>yearly</code> 或 <code>monthly</code>。</td><td>monthly</td></tr><tr><td><code>order</code></td><td>排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>1</td></tr><tr><td><code>show_count</code></td><td>显示每个归档的文章总数</td><td>true</td></tr><tr><td><code>format</code></td><td>日期格式</td><td>MMMM YYYY</td></tr><tr><td><code>style</code></td><td>归档列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>归档间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>归档列表的 class 名称。</td><td>archive</td></tr><tr><td><code>transform</code></td><td>改变归档名称显示方法的函数。请查看 <a href="https://hexo.io/zh-cn/docs/helpers#list-categories">list_categories</a> 中给出的例子</td><td></td></tr></tbody></table><h3 id="list-posts"><a href="#list-posts" class="headerlink" title="list_posts"></a>list_posts</h3><p>插入文章列表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- list_posts([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>orderby</code></td><td>文章排列方式</td><td>date</td></tr><tr><td><code>order</code></td><td>文章排列顺序。<code>1</code>, <code>asc</code> 升序；<code>-1</code>, <code>desc</code> 降序。</td><td>-1</td></tr><tr><td><code>style</code></td><td>文章列表的显示方式。使用 <code>list</code> 以无序列表（unordered list）方式显示。</td><td>list</td></tr><tr><td><code>separator</code></td><td>文章间的分隔符号。只有在 <code>style</code> 不是 <code>list</code> 时有用。</td><td>,</td></tr><tr><td><code>class</code></td><td>文章列表的 class 名称。</td><td>post</td></tr><tr><td><code>amount</code></td><td>要显示的文章数量（0 &#x3D; 无限制）</td><td>6</td></tr><tr><td><code>transform</code></td><td>改变文章名称显示方法的函数。请查看 <a href="https://hexo.io/zh-cn/docs/helpers#list-categories">list_categories</a> 中给出的例子</td><td></td></tr></tbody></table><h3 id="tagcloud"><a href="#tagcloud" class="headerlink" title="tagcloud"></a>tagcloud</h3><p>插入标签云。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- tagcloud([tags], [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>min_font</code></td><td>最小字体尺寸</td><td>10</td></tr><tr><td><code>max_font</code></td><td>最大字体尺寸</td><td>20</td></tr><tr><td><code>unit</code></td><td>字体尺寸的单位</td><td>px</td></tr><tr><td><code>amount</code></td><td>标签总量</td><td>40</td></tr><tr><td><code>orderby</code></td><td>标签排列方式</td><td>name</td></tr><tr><td><code>order</code></td><td>标签排列顺序。<code>1</code>, <code>sac</code> 升序；<code>-1</code>, <code>desc</code> 降序</td><td>1</td></tr><tr><td><code>color</code></td><td>使用颜色</td><td>false</td></tr><tr><td><code>start_color</code></td><td>开始的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 [颜色关键字]。此变量仅在 <code>color</code> 参数开启时才有用。</td><td></td></tr><tr><td><code>end_color</code></td><td>结束的颜色。您可使用十六进位值（<code>#b700ff</code>），rgba（<code>rgba(183, 0, 255, 1)</code>），hsla（<code>hsla(283, 100%, 50%, 1)</code>）或 [颜色关键字]。此变量仅在 <code>color</code> 参数开启时才有用。</td><td></td></tr><tr><td><code>class</code></td><td>标签的 class name 前缀</td><td></td></tr><tr><td><code>level</code></td><td>不同 class name 的总数。此变量仅在 <code>class</code> 参数设定时才有用。</td><td>10</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="paginator"><a href="#paginator" class="headerlink" title="paginator"></a>paginator</h3><p>插入分页链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>base</code></td><td>基础网址</td><td>&#x2F;</td></tr><tr><td><code>format</code></td><td>网址格式</td><td>page&#x2F;%d&#x2F;</td></tr><tr><td><code>total</code></td><td>分页总数</td><td>1</td></tr><tr><td><code>current</code></td><td>目前页数</td><td>0</td></tr><tr><td><code>prev_text</code></td><td>上一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td>Prev</td></tr><tr><td><code>next_text</code></td><td>下一页链接的文字。仅在 <code>prev_next</code> 设定开启时才有用。</td><td>Next</td></tr><tr><td><code>space</code></td><td>空白文字</td><td>&amp;hellip;</td></tr><tr><td><code>prev_next</code></td><td>显示上一页和下一页的链接</td><td>true</td></tr><tr><td><code>end_size</code></td><td>显示于两侧的页数</td><td>1</td></tr><tr><td><code>mid_size</code></td><td>显示于中间的页数</td><td>2</td></tr><tr><td><code>show_all</code></td><td>显示所有页数。如果开启此参数的话，<code>end_size</code> 和 <code>mid_size</code> 就没用了。</td><td>false</td></tr><tr><td><code>escape</code></td><td>Escape HTML tags</td><td>true</td></tr></tbody></table><p><strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- paginator(&#123;</span><br><span class="line">  prev_text: &#x27;&lt;&#x27;,</span><br><span class="line">  next_text: &#x27;&gt;&#x27;</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;!-- Rendered as --&gt;</span><br><span class="line">&lt;a href=&quot;/1/&quot;&gt;&amp;lt;&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/1/&quot;&gt;1&lt;/a&gt;</span><br><span class="line">2</span><br><span class="line">&lt;a href=&quot;/3/&quot;&gt;3&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/3/&quot;&gt;&amp;gt;&lt;/a&gt;</span><br><span class="line">&lt;%- paginator(&#123;</span><br><span class="line">  prev_text: &#x27;&lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">  next_text: &#x27;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">  escape: false</span><br><span class="line">&#125;) %&gt;</span><br><span class="line">&lt;!-- Rendered as --&gt;</span><br><span class="line">&lt;a href=&quot;/1/&quot;&gt;&lt;i class=&quot;fa fa-angle-left&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/1/&quot;&gt;1&lt;/a&gt;</span><br><span class="line">2</span><br><span class="line">&lt;a href=&quot;/3/&quot;&gt;3&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;/3/&quot;&gt;&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><h3 id="search-form"><a href="#search-form" class="headerlink" title="search_form"></a>search_form</h3><p>插入 Google 搜索框。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- search_form(options) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>class</code></td><td>表单的 class name</td><td>search-form</td></tr><tr><td><code>text</code></td><td>搜索提示文字</td><td>Search</td></tr><tr><td><code>button</code></td><td>显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。</td><td>false</td></tr></tbody></table><h3 id="number-format"><a href="#number-format" class="headerlink" title="number_format"></a>number_format</h3><p>格式化数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(number, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>precision</code></td><td>数字精度。此选项可为 <code>false</code> 或非负整数。</td><td>false</td></tr><tr><td><code>delimiter</code></td><td>千位数分隔符号</td><td>,</td></tr><tr><td><code>separator</code></td><td>整数和小数之间的分隔符号</td><td>.</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</span><br><span class="line">// 12,345.68</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</span><br><span class="line">// 12,345.6700</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</span><br><span class="line">// 12,345</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;delimiter: &#x27;&#x27;&#125;) %&gt;</span><br><span class="line">// 12345.67</span><br><span class="line"></span><br><span class="line">&lt;%- number_format(12345.67, &#123;separator: &#x27;/&#x27;&#125;) %&gt;</span><br><span class="line">// 12,345/67</span><br></pre></td></tr></table></figure><h3 id="meta-generator"><a href="#meta-generator" class="headerlink" title="meta_generator"></a>meta_generator</h3><p>Inserts <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">generator tag</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta_generator() %&gt;</span><br></pre></td></tr></table></figure><p><strong>Examples:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- meta_generator() %&gt;</span><br><span class="line">// &lt;meta name=&quot;generator&quot; content=&quot;Hexo 4.0.0&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="open-graph"><a href="#open-graph" class="headerlink" title="open_graph"></a>open_graph</h3><p>插入 open graph 资源。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- open_graph([options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>title</code></td><td>页面标题 (<code>og:title</code>)</td><td><code>page.title</code></td></tr><tr><td><code>type</code></td><td>页面类型 (<code>og:type</code>)</td><td>blog</td></tr><tr><td><code>url</code></td><td>页面网址 (<code>og:url</code>)</td><td><code>url</code></td></tr><tr><td><code>image</code></td><td>页面图片 (<code>og:image</code>)</td><td>内容中的图片</td></tr><tr><td><code>author</code></td><td>Article author (<code>og:article:author</code>)</td><td><code>config.author</code></td></tr><tr><td><code>date</code></td><td>Article published time (<code>og:article:published_time</code>)</td><td>Page published time</td></tr><tr><td><code>updated</code></td><td>Article modified time (<code>og:article:modified_time</code>)</td><td>Page modified time</td></tr><tr><td><code>language</code></td><td>Article language (<code>og:locale</code>)</td><td>&#96;page.lang</td></tr><tr><td><code>site_name</code></td><td>网站名称 (<code>og:site_name</code>)</td><td><code>config.title</code></td></tr><tr><td><code>description</code></td><td>页面描述 (<code>og:description</code>)</td><td>内容摘要或前 200 字</td></tr><tr><td><code>twitter_card</code></td><td>Twitter 卡片类型 (<code>twitter:card</code>)</td><td>summary</td></tr><tr><td><code>twitter_id</code></td><td>Twitter ID (<code>twitter:creator</code>)</td><td></td></tr><tr><td><code>twitter_site</code></td><td>Twitter 网站 (<code>twitter:site</code>)</td><td></td></tr><tr><td><code>google_plus</code></td><td>Google+ 个人资料链接</td><td></td></tr><tr><td><code>fb_admins</code></td><td>Facebook 管理者 ID</td><td></td></tr><tr><td><code>fb_app_id</code></td><td>Facebook 应用程序 ID</td><td></td></tr></tbody></table><h3 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h3><p>解析内容中的标题标签 (h1~h6) 并插入目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(str, [options]) %&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>class</code></td><td>Class 名称</td><td>toc</td></tr><tr><td><code>list_number</code></td><td>显示编号</td><td>true</td></tr><tr><td><code>max_depth</code></td><td>生成 TOC 的最大深度</td><td>6</td></tr><tr><td><code>min_depth</code></td><td>生成 TOC 的最小深度</td><td>1</td></tr></tbody></table><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- toc(page.content) %&gt;</span><br></pre></td></tr></table></figure><h4 id="data-toc-unnumbered-6-1-0"><a href="#data-toc-unnumbered-6-1-0" class="headerlink" title="data-toc-unnumbered (+6.1.0)"></a>data-toc-unnumbered (+6.1.0)</h4><p>Headings with attribute <code>data-toc-unnumbered=&quot;true&quot;</code> will be marked as unnumbered (list number will not be display).</p><blockquote><p>Warning!</p><p>For using <code>data-toc-unnumbered=&quot;true&quot;</code>, the renderer must have the option to add CSS classes.</p><p>Please see below PRs.</p><ul><li><a href="https://github.com/hexojs/hexo/pull/4871">https://github.com/hexojs/hexo/pull/4871</a></li><li><a href="https://github.com/hexojs/hexo-util/pull/269">https://github.com/hexojs/hexo-util/pull/269</a></li><li><a href="https://github.com/hexojs/hexo-renderer-markdown-it/pull/174">https://github.com/hexojs/hexo-renderer-markdown-it/pull/174</a></li></ul></blockquote><h1 id="国际化（i18n）"><a href="#国际化（i18n）" class="headerlink" title="国际化（i18n）"></a>国际化（i18n）</h1><p>若要让您的网站以不同语言呈现，您可使用国际化（internationalization）功能。请先在 <code>_config.yml</code> 中调整 <code>language</code> 设定，这代表的是预设语言，您也可设定多个语言来调整预设语言的顺位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">language: zh-tw</span><br><span class="line"></span><br><span class="line">language: </span><br><span class="line">- zh-tw</span><br><span class="line">- en</span><br></pre></td></tr></table></figure><h3 id="语言文件"><a href="#语言文件" class="headerlink" title="语言文件"></a>语言文件</h3><p>语言文件可以使用 YAML 或 JSON 编写，并放在主题文件夹中的 <code>languages</code> 文件夹。您可以在语言文件中使用 <a href="https://github.com/alexei/sprintf.js">printf 格式</a>。</p><h3 id="模板-1"><a href="#模板-1" class="headerlink" title="模板"></a>模板</h3><p>在模板中，透过 <code>__</code> 或 <code>_p</code> 辅助函数，即可取得翻译后的字符串，前者用于一般使用；而后者用于复数字符串。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">en.ymlindex:</span><br><span class="line">  title: Home</span><br><span class="line">  add: Add</span><br><span class="line">  video:</span><br><span class="line">    zero: No videos</span><br><span class="line">    one: One video</span><br><span class="line">    other: %d videos</span><br><span class="line">&lt;%= __(&#x27;index.title&#x27;) %&gt;</span><br><span class="line">// Home</span><br><span class="line"></span><br><span class="line">&lt;%= _p(&#x27;index.video&#x27;, 3) %&gt;</span><br><span class="line">// 3 videos</span><br></pre></td></tr></table></figure><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>您可在 front-matter 中指定该页面的语言，也可在 <code>_config.yml</code> 中修改 <code>i18n_dir</code> 设定，让 Hexo 自动侦测。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i18n_dir: :lang</span><br></pre></td></tr></table></figure><p><code>i18n_dir</code> 的预设值是 <code>:lang</code>，也就是说 Hexo 会捕获网址中的第一段以检测语言，举例来说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/index.html =&gt; en</span><br><span class="line">/archives/index.html =&gt; en</span><br><span class="line">/zh-tw/index.html =&gt; zh-tw</span><br></pre></td></tr></table></figure><p>捕获到的字符串唯有在语言文件存在的情况下，才会被当作是语言，因此例二 <code>/archives/index.html</code> 中的 <code>archives</code> 就不被当成是语言。</p><h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>Hexo 对 <a href="https://github.com/highlightjs/highlight.js">highlight.js</a> 与 <a href="https://github.com/PrismJS/prism">prismjs</a> 两种代码高亮库提供内建支持。本篇教程将展示如何将 Hexo 的内建语法高亮组件整合至你的模板中。</p><h2 id="如何在文章中插入代码块"><a href="#如何在文章中插入代码块" class="headerlink" title="如何在文章中插入代码块"></a>如何在文章中插入代码块</h2><p>Hexo 支持两种代码块写法——<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块标签插件</a>和<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%BB%A3%E7%A0%81%E5%9D%97">反引号代码块标签插件</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% code [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line"></span><br><span class="line">​``` [language] [title] [url] [link text] [additional options]</span><br><span class="line">code snippet</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>上面的第三种是 Markdown 的 fenced code block 语法。Hexo 对其进行了扩展，使其支持更多特性。在<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97">标签插件文档</a>中你可以找到可用的选项。</p><blockquote><p>提示：Hexo 支持用任何格式书写文章，只需安装相应渲染插件即可。不论文章以何种格式书写（Markdown、EJS、Swig、Nunjuck、Pug、ASCIIDoc），上述三种代码块语法总是可用。</p></blockquote><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  line_number: true</span><br><span class="line">  line_threshold: 0</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br><span class="line">  exclude_languages:</span><br><span class="line">    - example</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  line_threshold: 0</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>以上为 Hexo 的默认配置。</p><h2 id="禁用"><a href="#禁用" class="headerlink" title="禁用"></a>禁用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">highlight:</span><br><span class="line">  enable: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><p>当 <code>highlight.enable</code> 和 <code>prismjs.enable</code> 均为 <code>false</code> 时，代码块输出的 HTML 由相应的渲染器控制。举个例子：<a href="https://github.com/markedjs/marked"><code>marked.js</code></a>（Hexo 的默认 Markdown 渲染器 <a href="https://github.com/hexojs/hexo-renderer-marked"><code>hexo-renderer-marked</code></a> 由此驱动）会把语言加入 <code>&lt;code&gt;</code> 标签的 <code>class</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```yaml</span><br><span class="line">hello: hexo</span><br><span class="line">​```</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">  &lt;code class=&quot;yaml&quot;&gt;hello: hexo&lt;/code&gt;</span><br><span class="line">&lt;/pre&gt;</span><br></pre></td></tr></table></figure><p>如果内建语法高亮器均未启用，你可以安装第三方语法高亮插件，也可以使用浏览器端的语法高亮库（例如 <code>highlight.js</code> 和 <code>prism.js</code> 也都支持在浏览器中运行）。</p><h2 id="Highlight-js"><a href="#Highlight-js" class="headerlink" title="Highlight.js"></a>Highlight.js</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  auto_detect: false</span><br><span class="line">  line_number: true</span><br><span class="line">  line_threshold: 0</span><br><span class="line">  tab_replace: &#x27;  &#x27;</span><br><span class="line">  exclude_languages:</span><br><span class="line">    - example</span><br><span class="line">  wrap: true</span><br><span class="line">  hljs: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><p><code>highlight.js</code> 默认开启，用作 Hexo 的服务端高亮组件。如果你需要在浏览器端运行 <code>highlight.js</code>，请把它关闭。</p><blockquote><p>「服务端高亮」指语法高亮在 <code>hexo generate</code> 或 <code>hexo server</code> 时完成。</p></blockquote><h3 id="auto-detect"><a href="#auto-detect" class="headerlink" title="auto_detect"></a>auto_detect</h3><p><code>auto_detect</code> 是 <code>highlight.js</code> 的特性，能够自动检测代码块的语言。</p><blockquote><p>提示：如果你想使用「子语言高亮」功能（例如在高亮 HTML 时同时高亮内部嵌入的 JavaScript 代码），请开启 <code>auto_detect</code>，并且在文章中插入代码块时不要标注语言。</p></blockquote><blockquote><p>警告！</p><p><code>auto_detect</code> 十分耗费资源。 如果你不需要使用「子语言高亮」功能，或者不介意在书写代码块时标记语言，请不要启用此功能。</p></blockquote><h3 id="line-number"><a href="#line-number" class="headerlink" title="line_number"></a>line_number</h3><p><code>highlight.js</code> <a href="https://highlightjs.readthedocs.io/en/latest/line-numbers.html">不支持</a>行号显示。</p><p>Hexo 通过用 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 包裹其代码块为其添加了行号显示支持:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;figure class=&quot;highlight yaml&quot;&gt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tbody&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td class=&quot;gutter&quot;&gt;</span><br><span class="line">    &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">  &lt;td class=&quot;code&quot;&gt;</span><br><span class="line">    &lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;hello:&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;hexo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/figure&gt;</span><br></pre></td></tr></table></figure><p>这不是 <code>highlight.js</code> 的行为，因此需要为 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 添加自定义 CSS 代码。部分主题对此提供内建支持。</p><p>你大概也注意到了，所有代码块的 <code>class</code> 都没有 <code>hljs-</code> 前缀。我们 <a href="https://hexo.io/zh-cn/docs/syntax-highlight#hljs">为此专门准备了一个章节</a>。</p><h3 id="line-threshold-6-1-0"><a href="#line-threshold-6-1-0" class="headerlink" title="line_threshold (+6.1.0)"></a>line_threshold (+6.1.0)</h3><p>Accepts an optional threshold to only show line numbers as long as the numbers  of lines of the code block exceed such threshold. Default is <code>0</code>.</p><h3 id="tab-replace"><a href="#tab-replace" class="headerlink" title="tab_replace"></a>tab_replace</h3><p>用代码内的 tab (<code>\t</code>) 替换为给定值，默认值是两个空格。</p><h3 id="exclude-languages-6-1-0"><a href="#exclude-languages-6-1-0" class="headerlink" title="exclude_languages (+6.1.0)"></a>exclude_languages (+6.1.0)</h3><p>Only wrap with <code>&lt;pre&gt;&lt;code class=&quot;lang&quot;&gt;&lt;/code&gt;&lt;/pre&gt;</code> and will not render all tags(<code>span</code>, and <code>br</code>) in content if are languages matches this option.</p><h3 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h3><p>为了支持行号显示，Hexo 将输出包裹在了 <code>&lt;figure&gt;</code> 和 <code>&lt;table&gt;</code> 内部。如果要保持 <code>highlight.js</code> 原来的行为，你需要将 <code>line_number</code> 和 <code>wrap</code> <strong>全部</strong>关闭。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;</span><br><span class="line">&lt;span class=&quot;comment&quot;&gt;# _config.yml&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;attr&quot;&gt;hexo:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;hexo&lt;/span&gt;</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><blockquote><p>警告！</p><p>因为 <code>line_number</code> 功能依赖 <code>wrap</code>，你无法在配置中关闭 <code>wrap</code> 而又开启 <code>line_number</code>。如果你将 <code>line_number</code> 设置为 <code>true</code> 的话，<code>wrap</code> 将被自动开启。</p></blockquote><h3 id="hljs"><a href="#hljs" class="headerlink" title="hljs"></a>hljs</h3><p>当 <code>hljs</code> 设置为 <code>true</code> 时，所有代码块的 HTML 输出均会给 <code>class</code> 添加 <code>hljs-</code> 前缀（无论 <code>wrap</code> 是否开启）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;&lt;code class=&quot;yaml hljs&quot;&gt;</span><br><span class="line">&lt;span class=&quot;hljs-comment&quot;&gt;# _config.yml&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;hljs-attr&quot;&gt;hexo:&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;hexo&lt;/span&gt;</span><br><span class="line">&lt;/code&gt;&lt;/pre&gt;</span><br></pre></td></tr></table></figure><blockquote><p>提示：当 <code>line_number</code> 和 <code>wrap</code> 为 <code>false</code>，<code>hljs</code> 为 <code>true</code> 的时候，你可以在站点上直接应用 <code>highlight.js</code> 的<a href="https://github.com/highlightjs/highlight.js/tree/master/src/styles">主题</a>。</p></blockquote><h2 id="PrismJS"><a href="#PrismJS" class="headerlink" title="PrismJS"></a>PrismJS</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">highlight:</span><br><span class="line">  enable: false</span><br><span class="line">prismjs:</span><br><span class="line">  enable: true</span><br><span class="line">  preprocess: true</span><br><span class="line">  line_number: true</span><br><span class="line">  line_threshold: 0</span><br><span class="line">  tab_replace: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>PrismJS 默认禁用。启用 PrimeJS 前应设置 <code>highlight.enable</code> 为 <code>false</code>。</p><h3 id="preprocess"><a href="#preprocess" class="headerlink" title="preprocess"></a>preprocess</h3><p>Hexo 内建的 PrismJS 支持浏览器端高亮（<code>preprocess</code> 设置为 <code>false</code>）和服务器端高亮（<code>preprocess</code> 设置为 <code>true</code>）两种方式。</p><p>使用服务器端高亮时（<code>preprocess</code> 设置为 <code>true</code>），只需要在站点引入 Prismjs 的主题（CSS 样式表）即可；而使用浏览器端高亮时（<code>preprocess</code> 设置为 <code>false</code>），需要将 JavaScript 文件也引入。</p><p>PrismJS 主要是面向浏览器的。因此，在服务器端高亮模式下只有部分插件可用：</p><ul><li><a href="https://prismjs.com/plugins/line-numbers/">行号显示</a>：需要引入<code>prism-line-numbers.css</code>，无需引入<code>prism-line-numbers.js</code>。Hexo 将生成其所需的 HTML 代码片段。</li><li><a href="https://prismjs.com/plugins/show-language/">语言显示</a>：当代码块有标注语言时，Hexo 总会添加 <code>data-language</code> 属性。</li><li>Hexo 也支持其它不需要特殊 HTML 代码格式的 PrismJS 插件，不过你需要引入它们的 JavaScript 文件。</li></ul><p><code>preprocess</code> 设置为 <code>false</code> 时所有 primejs 插件均可用，只需额外注意以下几点：</p><ul><li><a href="https://prismjs.com/plugins/line-numbers/">行号显示</a>：当 <code>preprocess</code> 设置为 <code>false</code> 时，Hexo 不会生成插件所需的 HTML 代码格式。<code>prism-line-numbers.css</code> 和 <code>prism-line-numbers.js</code>均需被引入。</li><li><a href="https://prismjs.com/plugins/show-language/">语言显示</a>：当代码块有标注语言时，Hexo 总会添加 <code>data-language</code> 属性。</li><li><a href="https://prismjs.com/plugins/line-highlight/">高亮特定行</a>: Hexo 的<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E4%BB%A3%E7%A0%81%E5%9D%97">代码块标签插件</a>和<a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%BB%A3%E7%A0%81%E5%9D%97">反引号代码块标签插件</a>都支持高亮特定行的语法（即 <code>mark</code> 选项）。当 <code>mark</code> 项被设置时，Hexo 将生成其所需的 HTML 代码格式。</li></ul><h3 id="line-number-1"><a href="#line-number-1" class="headerlink" title="line_number"></a>line_number</h3><p>当 <code>preprocess</code> 与 <code>line_number</code> 均设置为 <code>true</code> 时，只需要引入 <code>prism-line-numbers.css</code> 即可启用行号显示。如果 <code>preprocess</code> 和 <code>line_number</code> 均被关闭，则需要将 <code>prism-line-numbers.css</code> 和 <code>prism-line-numbers.js</code> 都引入才能启用行号显示。</p><h3 id="line-threshold-6-1-0-1"><a href="#line-threshold-6-1-0-1" class="headerlink" title="line_threshold (+6.1.0)"></a>line_threshold (+6.1.0)</h3><p>Accepts an optional threshold to only show line numbers as long as the numbers  of lines of the code block exceed such threshold. Default is <code>0</code>.</p><h3 id="tab-replace-1"><a href="#tab-replace-1" class="headerlink" title="tab_replace"></a>tab_replace</h3><p>用代码内的 tab (<code>\t</code>) 替换为给定值，默认值是两个空格。</p><h2 id="其它参考资料"><a href="#其它参考资料" class="headerlink" title="其它参考资料"></a>其它参考资料</h2><ul><li><a href="https://highlightjs.readthedocs.io/en/latest/">Highlight.js</a></li><li><a href="https://prismjs.com/">PrismJS</a></li></ul><p>Hexo 语法高亮部分的源码可参见：</p><ul><li><a href="https://github.com/hexojs/hexo-util/blob/master/lib/highlight.js">Highlight.js 工具函数</a></li><li><a href="https://github.com/hexojs/hexo-util/blob/master/lib/prism.js">PrismJS 工具函数</a></li><li><a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/tag/code.js">代码块标签插件</a></li><li><a href="https://github.com/hexojs/hexo/blob/master/lib/plugins/filter/before_post_render/backtick_code_block.js">反引号代码块标签插件</a></li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>Hexo 有强大的插件系统，使您能轻松扩展功能而不用修改核心模块的源码。在 Hexo 中有两种形式的插件：</p><h3 id="脚本（Scripts）"><a href="#脚本（Scripts）" class="headerlink" title="脚本（Scripts）"></a>脚本（Scripts）</h3><p>如果您的代码很简单，建议您编写脚本，您只需要把 JavaScript 文件放到 <code>scripts</code> 文件夹，在启动时就会自动载入。</p><h3 id="插件（Packages）"><a href="#插件（Packages）" class="headerlink" title="插件（Packages）"></a>插件（Packages）</h3><p>如果您的代码较复杂，或是您想要发布到 NPM 上，建议您编写插件。首先，在 <code>node_modules</code> 文件夹中建立文件夹，文件夹名称开头必须为 <code>hexo-</code>，如此一来 Hexo 才会在启动时载入；否则 Hexo 将会忽略它。</p><p>文件夹内至少要包含 2 个文件：一个是主程序，另一个是 <code>package.json</code>，描述插件的用途和所依赖的插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── index.js</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><p><code>package.json</code> 中至少要包含 <code>name</code>, <code>version</code>, <code>main</code> 属性，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-my-plugin&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p>您可以使用 Hexo 提供的官方工具插件来加速开发：</p><ul><li><a href="https://github.com/hexojs/hexo-fs">hexo-fs</a>：文件 IO</li><li><a href="https://github.com/hexojs/hexo-util">hexo-util</a>：工具程式</li><li><a href="https://github.com/hexojs/hexo-i18n">hexo-i18n</a>：本地化（i18n）</li><li><a href="https://github.com/hexojs/hexo-pagination">hexo-pagination</a>：生成分页资料</li></ul><h3 id="发布-1"><a href="#发布-1" class="headerlink" title="发布"></a>发布</h3><p>当您完成插件后，可以考虑将它发布到 <a href="https://hexo.io/plugins">插件列表</a>，让更多人能够使用您的插件。发布插件的步骤和 <a href="https://hexo.io/zh-cn/docs/contributing.html#%E6%9B%B4%E6%96%B0%E6%96%87%E4%BB%B6">更新文件</a> 非常类似。</p><ol><li><p>Fork <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a></p></li><li><p>把库（repository）复制到电脑上，并安装所依赖的插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/&lt;username&gt;/site.git</span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li><li><p>编辑 <code>source/_data/plugins.yml</code>，在档案中新增您的插件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: hexo-server</span><br><span class="line">  description: Server module for Hexo.</span><br><span class="line">  link: https://github.com/hexojs/hexo-server</span><br><span class="line">  tags:</span><br><span class="line">    - official</span><br><span class="line">    - server</span><br><span class="line">    - console</span><br></pre></td></tr></table></figure></li><li><p>推送（push）分支。</p></li><li><p>建立一个新的合并申请（pull request）并描述改动。</p></li></ol><hr><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a><strong>其他</strong></h1><hr><h1 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h1><p>在使用 Hexo 时，您可能会遇到一些问题，下列的常见问题解答可能会对您有所帮助。如果您在这里找不到解答，可以在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 或 <a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。</p><h2 id="YAML-解析错误"><a href="#YAML-解析错误" class="headerlink" title="YAML 解析错误"></a>YAML 解析错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JS-YAML: incomplete explicit mapping pair; a key node is missed at line 18, column 29:</span><br><span class="line">      last_updated: Last updated: %s</span><br></pre></td></tr></table></figure><p>如果 YAML 字符串中包含冒号（<code>:</code>）的话，请加上引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JS-YAML: bad indentation of a mapping entry at line 18, column 31:</span><br><span class="line">      last_updated:&quot;Last updated: %s&quot;</span><br></pre></td></tr></table></figure><p>请确认您使用空格进行缩进（Soft tab），并确认冒号后有加上一个空格。</p><p>您可参阅 <a href="http://www.yaml.org/spec/1.2/spec.html">YAML 规范</a> 以取得更多信息。</p><h2 id="EMFILE-错误"><a href="#EMFILE-错误" class="headerlink" title="EMFILE 错误"></a>EMFILE 错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: EMFILE, too many open files</span><br></pre></td></tr></table></figure><p>虽然 Node.js 有非阻塞 I&#x2F;O，同步 I&#x2F;O 的数量仍被系统所限制，在生成大量静态文件的时候，您可能会碰到 EMFILE 错误，您可以尝试提高同步 I&#x2F;O 的限制数量来解决此问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -n 10000</span><br></pre></td></tr></table></figure><p>（这一命令只对Linux系统有效）</p><p><strong>Error: cannot modify limit</strong></p><p>If you encounter the following error:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -n 10000</span><br><span class="line">ulimit: open files: cannot modify limit: Operation not permitted</span><br></pre></td></tr></table></figure><p>It means some system-wide configurations are preventing <code>ulimit</code> to being increased to a certain limit.</p><p>To override the limit:</p><ol><li>Add the following line to “&#x2F;etc&#x2F;security&#x2F;limits.conf”:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* - nofile 10000</span><br><span class="line"></span><br><span class="line"># &#x27;*&#x27; applies to all users and &#x27;-&#x27; set both soft and hard limits</span><br></pre></td></tr></table></figure><ul><li>The above setting may not apply in some cases, ensure  “&#x2F;etc&#x2F;pam.d&#x2F;login” and “&#x2F;etc&#x2F;pam.d&#x2F;lightdm” have the following line.  (Ignore this step if those files do not exist)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session required pam_limits.so</span><br></pre></td></tr></table></figure><ol><li>If you are on a <a href="https://en.wikipedia.org/wiki/Systemd#Adoption">systemd-based</a> distribution, systemd may override “limits.conf”. To set the limit in  systemd, add the following line in “&#x2F;etc&#x2F;systemd&#x2F;system.conf” and  “&#x2F;etc&#x2F;systemd&#x2F;user.conf”:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DefaultLimitNOFILE=10000</span><br></pre></td></tr></table></figure><ol><li>Reboot</li></ol><h2 id="Git-部署问题"><a href="#Git-部署问题" class="headerlink" title="Git 部署问题"></a>Git 部署问题</h2><h3 id="RPC-failed"><a href="#RPC-failed" class="headerlink" title="RPC failed"></a>RPC failed</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">error: RPC failed; result=22, HTTP code = 403</span><br><span class="line"></span><br><span class="line">fatal: &#x27;username.github.io&#x27; does not appear to be a git repository</span><br></pre></td></tr></table></figure><p>请确认您已经在电脑上 <a href="https://help.github.com/articles/set-up-git">配置 git</a>，或改用 HTTPS 库（repository）地址。</p><h3 id="Error-ENOENT-no-such-file-or-directory"><a href="#Error-ENOENT-no-such-file-or-directory" class="headerlink" title="Error: ENOENT: no such file or directory"></a>Error: ENOENT: no such file or directory</h3><p>如果你遇到了这个错误，有可能是你的文件名、分类或者标签的名字混淆了大写和小写，你可以尝试检查每一个标签和分类的名称，是否大小写一致来修复这一问题。</p><h2 id="服务器问题"><a href="#服务器问题" class="headerlink" title="服务器问题"></a>服务器问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: listen EADDRINUSE</span><br></pre></td></tr></table></figure><p>您可能同时开启两个 Hexo 服务器，或者有其他应用程序正在占用相同的端口，请尝试修改 <code>port</code> 参数，或是在启动 Hexo 服务器时加上 <code>-p</code> 选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><h2 id="插件安装问题"><a href="#插件安装问题" class="headerlink" title="插件安装问题"></a>插件安装问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! node-waf configure build</span><br></pre></td></tr></table></figure><p>当您尝试安装以 C&#x2F;C++ 或其他非 JavaScript 语言所编写的插件时，可能会遇到此类问题，请确认您已经在电脑上安装相对应的编译器。</p><h2 id="DTrace-错误-（Mac-OS-X）"><a href="#DTrace-错误-（Mac-OS-X）" class="headerlink" title="DTrace 错误 （Mac OS X）"></a>DTrace 错误 （Mac OS X）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: Cannot find module &#x27;./build/Release/DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &#x27;./build/default/DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br><span class="line">&#123; [Error: Cannot find module &#x27;./build/Debug/DTraceProviderBindings&#x27;] code: &#x27;MODULE_NOT_FOUND&#x27; &#125;</span><br></pre></td></tr></table></figure><p>DTrace 安装可能有错误 , 使用下列命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --no-optional</span><br></pre></td></tr></table></figure><p>参考 <a href="https://github.com/hexojs/hexo/issues/1326#issuecomment-113871796">#1326</a></p><h2 id="在-Jade-或-Swig-遍历资料"><a href="#在-Jade-或-Swig-遍历资料" class="headerlink" title="在 Jade 或 Swig 遍历资料"></a>在 Jade 或 Swig 遍历资料</h2><p>Hexo 使用 <a href="https://github.com/hexojs/warehouse">Warehouse</a> 存储资料，它不是一般数组所以必须先进行类型转型才能遍历。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for post in site.posts.toArray() %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><h2 id="资料没有更新"><a href="#资料没有更新" class="headerlink" title="资料没有更新"></a>资料没有更新</h2><p>有时资料可能没有被更新，或是生成的文件与修改前的相同，您可以尝试清除缓存并再执行一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><h2 id="命令没有执行"><a href="#命令没有执行" class="headerlink" title="命令没有执行"></a>命令没有执行</h2><p>如果你除了 <code>hexo help</code>、<code>hexo init</code> 和 <code>hexo version</code> 以外不能执行任何命令、并且你的任何命令都只返回了 <code>hexo help</code> 的内容，这可能是由于 <code>package.json</code> 中缺乏 <code>hexo</code> 字段导致的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;3.9.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泄露（Escape）内容"><a href="#泄露（Escape）内容" class="headerlink" title="泄露（Escape）内容"></a>泄露（Escape）内容</h2><p>Hexo 使用 <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> 来解析文章（旧版本使用 <a href="http://paularmstrong.github.io/swig/">Swig</a>，两者语法类似），内容若包含 <code>&#123;&#123; &#125;&#125;</code> 或 <code>&#123;% %&#125;</code> 可能导致解析错误，您可以用 <a href="https://hexo.io/docs/tag-plugins#Raw"><code>raw</code></a> 标签包裹，single backtick <code>&#123;&#123; &#125;&#125;</code> 或 triple backtick 来避免潜在问题发生。<br>Alternatively, Nunjucks tags can be disabled through the renderer’s option (if supported), <a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">API</a> or <a href="https://hexo.io/docs/front-matter">front-matter</a>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">Hello &#123;&#123; world &#125;&#125;</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line">​```</span><br><span class="line">Hello &#123;&#123; world &#125;&#125;</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><h2 id="ENOSPC-错误-（Linux）"><a href="#ENOSPC-错误-（Linux）" class="headerlink" title="ENOSPC 错误 （Linux）"></a>ENOSPC 错误 （Linux）</h2><p>运行 <code>$ hexo server</code> 命令有时会返回这样的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: watch ENOSPC ...</span><br></pre></td></tr></table></figure><p>它可以用过运行 <code>$ npm dedupe</code> 来解决，如果不起作用的话，可以尝试在 Linux 终端中运行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</span><br></pre></td></tr></table></figure><p>这将会提高你能监视的文件数量。</p><h2 id="EMPERM-Error-Windows-Subsystem-for-Linux"><a href="#EMPERM-Error-Windows-Subsystem-for-Linux" class="headerlink" title="EMPERM Error (Windows Subsystem for Linux)"></a>EMPERM Error (Windows Subsystem for Linux)</h2><p>在执行 <code>hexo server</code> 后返回如下错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: watch /path/to/hexo/theme/ EMPERM</span><br></pre></td></tr></table></figure><p>这是由于你使用的 WSL 版本不支持监听文件系统改动。 最新版的 WSL 已经解决了这一问题。</p><p>您也仍然可以通过先使用 <code>hexo g</code> 生成文件然后将其作为静态服务器运行来从 WSL 环境运行服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure><p>关于 WSL 的这一 Issue 请前往 <a href="https://github.com/Microsoft/BashOnWindows/issues/216">https://github.com/Microsoft/BashOnWindows/issues/216</a> 查看。目前这一问题已经得到了解决。</p><h2 id="模板渲染错误"><a href="#模板渲染错误" class="headerlink" title="模板渲染错误"></a>模板渲染错误</h2><p>有的时候你在执行 <code>hexo generate</code> 时会返回以下错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path)</span><br></pre></td></tr></table></figure><p>一种可能的原因是你的文件中存在一些不可被识别的字符，比如不可见的零宽度字符。</p><h1 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h1><p>我们非常欢迎您加入 Hexo 的开发。 🤗</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>我们非常欢迎您加入 Hexo 的开发，这份文件将帮助您了解开发流程。</p><h3 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h3><p>请首先阅读<a href="https://github.com/hexojs/hexo/blob/master/CODE_OF_CONDUCT.md">《贡献者行为准则》</a>，并确保您不会违反它。</p><p>请使用以下代码风格：</p><ul><li>遵守 <a href="https://google.github.io/styleguide/jsguide.html">Google JavaScript 代码风格</a>。</li><li>缩进使用 2 个空格。</li><li>不要把逗号放在最前面。</li></ul><p>另外，Hexo 拥有自己的 <a href="https://github.com/hexojs/eslint-config-hexo">ESLint 配置</a>，因此请确保您的贡献能够通过 ESLint。</p><h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><ol><li>Fork <a href="https://github.com/hexojs/hexo">hexojs&#x2F;hexo</a></li><li>把库（repository）复制到电脑上，并安装所依赖的插件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/&lt;username&gt;/hexo.git</span><br><span class="line">$ cd hexo</span><br><span class="line">$ npm install</span><br><span class="line">$ git submodule update --init</span><br></pre></td></tr></table></figure><ol><li>新增一个功能分支。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b new_feature</span><br></pre></td></tr></table></figure><ol><li>开始开发。</li><li>推送（push）分支。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin new_feature</span><br></pre></td></tr></table></figure><ol><li>建立一个新的合并申请（pull request）并描述变动。</li></ol><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>不要修改 <code>package.json</code> 的版本号。</li><li>只有在测试通过的情况下您的合并申请才会被批准，在提交前别忘了进行测试。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm test</span><br></pre></td></tr></table></figure><h2 id="更新-Hexo-官方插件"><a href="#更新-Hexo-官方插件" class="headerlink" title="更新 Hexo 官方插件"></a>更新 Hexo 官方插件</h2><p>我们也欢迎给 <a href="https://github.com/hexojs">Hexo 官方插件</a> 提交 PR 和 Issue 🤗</p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>Hexo 文档开放源代码，您可以在 <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a> 找到源代码。</p><h3 id="工作流-1"><a href="#工作流-1" class="headerlink" title="工作流"></a>工作流</h3><ol><li>Fork <a href="https://github.com/hexojs/site">hexojs&#x2F;site</a></li><li>把库（repository）复制到电脑上，并安装所依赖的插件。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g # If you don&#x27;t have hexo-cli installed</span><br><span class="line">$ git clone https://github.com/&lt;username&gt;/site.git</span><br><span class="line">$ cd site</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><ol><li>开始编辑文件，您可以通过服务器预览变动。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><ol><li>推送（push）分支。</li><li>建立一个新的合并申请（pull request）并描述变动。</li></ol><h3 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h3><ol><li>在 <code>source</code> 资料夹中建立一个新的语言资料夹（全小写）。</li><li>把 <code>source</code> 资料夹中相关的文件（Markdown 和模板文件）复制到新的语言资料夹中。</li><li>在 <code>source/_data/language.yml</code> 中新增语言。</li><li>将 <code>en.yml</code> 复制到 <code>themes/navy/languages</code>中并命名为语言名称（全小写）。</li></ol><h2 id="反馈问题"><a href="#反馈问题" class="headerlink" title="反馈问题"></a>反馈问题</h2><p>当您在使用 Hexo 时遇到问题，您可以尝试在 <a href="https://hexo.io/zh-cn/docs/troubleshooting">问题解答</a> 中寻找解答，或是在 <a href="https://github.com/hexojs/hexo/issues">GitHub</a> 或 <a href="https://groups.google.com/group/hexo">Google Group</a> 上提问。如果你没有找答案，请在 Github 报告它。</p><ol><li>在 <a href="https://hexo.io/zh-cn/docs/commands.html#%E8%B0%83%E8%AF%95%E6%A8%A1%E5%BC%8F">调试模式</a> 中重现问题。</li><li>在 GitHub 上提交 Issue 时，请遵循 Issue 模板中的步骤提供调试消息和版本信息。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo搭建博客使用教程&quot;&gt;&lt;a href=&quot;#Hexo搭建博客使用教程&quot; class=&quot;headerlink&quot; title=&quot;Hexo搭建博客使用教程&quot;&gt;&lt;/a&gt;Hexo搭建博客使用教程&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&quot;开始使用&quot;&gt;&lt;a href=&quot;#开始使用</summary>
      
    
    
    
    
    <category term="-学习资料" scheme="https://dumingqing.github.io/tags/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>悟道</title>
    <link href="https://dumingqing.github.io/2022/04/20/%E4%B8%80%E3%80%81%E6%82%9F%E9%81%93/"/>
    <id>https://dumingqing.github.io/2022/04/20/%E4%B8%80%E3%80%81%E6%82%9F%E9%81%93/</id>
    <published>2022-04-20T12:26:39.000Z</published>
    <updated>2022-04-20T11:14:04.103Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">逢源不自己</span><br><span class="line">外通内难通</span><br><span class="line">孜孜不停息</span><br><span class="line">秒阴不废弛</span><br><span class="line">啬啬守守守</span><br><span class="line">坎坎依就走</span><br><span class="line">十年临门处</span><br><span class="line">有缘才进出!</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring课堂笔记</title>
    <link href="https://dumingqing.github.io/2022/04/20/Spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    <id>https://dumingqing.github.io/2022/04/20/Spring%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-20T10:56:36.000Z</published>
    <updated>2022-04-20T10:58:45.473Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><span id="more"></span><h1 id="Spring课堂笔记"><a href="#Spring课堂笔记" class="headerlink" title="Spring课堂笔记"></a>Spring课堂笔记</h1><h2 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h2><h3 id="1-1、简介"><a href="#1-1、简介" class="headerlink" title="1.1、简介"></a>1.1、简介</h3><ul><li><p>Spring:春天－－－－〉给软件行业带来了春天！</p></li><li><h1 id="Spring-makes-Java-simple-modern-productive-reactive-cloud-ready"><a href="#Spring-makes-Java-simple-modern-productive-reactive-cloud-ready" class="headerlink" title="Spring makes Java simple. modern. productive. reactive. cloud-ready."></a>Spring makes Java simple. modern. productive. reactive. cloud-ready.</h1></li><li><p>spring理念：使现有的技术更加容易使用，整合了现有的技术框架！</p></li><li><p>SSH:    Struct2+Spring+Hibernate</p></li><li><p>SSM:    SpringMVC+Spring+Mybatis</p></li><li><p>官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></p></li><li><p>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring">http://repo.spring.io/release/org/springframework/spring</a></p></li><li><p>GitHub:<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p></li><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h3><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级的、非入侵的框架</li><li>控制反转（IOC）、面向切面编程(AOP)</li><li>支持事务处理，对框架整合的支持</li></ul><p>&#x3D;&#x3D;总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！&#x3D;&#x3D;</p><h3 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h3><p>Spring Core：框架的最基础部分，提供 IoC 容器，对 bean 进行管理。它主要的组件就是BeanFactory, 是工厂模式的实现。同时BeanFactory适用控制反转（IOC）思想将应用程序的配置和依赖性规范与实际的应用程序分开。</p><p>Spring Context：继承BeanFactory，提供上下文信息，扩展出JNDI、EJB、电子邮件、国际化等功能。</p><p>Spring DAO：提供了JDBC的抽象层，还提供了声明性事务管理方法。并且极大地降低了需要编写地异常代码数据 （例如打开和关闭连接）。</p><p>Spring ORM：提供了JPA、JDO、Hibernate、MyBatis 等ORM映射层.</p><p>Spring AOP：集成了所有AOP功能。减弱代码的功能耦合，清晰的被分离开。</p><p>Spring Web：提供了基础的 Web 开发的上下文信息，现有的Web框架，如JSF、Tapestry、Structs等，提供了集成</p><p>Spring Web MVC：提供了 Web 应用的 Model-View-Controller 全功能实现。</p><p><img src="E:\博客文档\image-20220416084450824.png" alt="image-20220416084450824"></p><h3 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h3><p>在spring的官网有这个介绍：现代化的Java开发，说白了就是基于Spring的开发！</p><p><img src="E:\博客文档\image-20220416090013833.png" alt="image-20220416090013833"></p><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速的开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>SpringCloud基于SpringBoot实现的</li></ul></li></ul><p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC!承上启下的作用。</p><p>弊端：发展太久之后，违背了原来的理念，配置十分繁杂，人称“配置地狱”</p><h2 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h2><h3 id="2-1、传统写法"><a href="#2-1、传统写法" class="headerlink" title="2.1、传统写法"></a>2.1、传统写法</h3><p>1、UserDao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、UserDaoImpl实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取用户的数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、UserService业务接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、UserServiceImpl业务实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> UserDao userDao=<span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，Dao层他们不需要接触！</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">              userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是我们原来的方式，开始大家也都是这么去写的吧，</p><h3 id="2-2、IOC理念"><a href="#2-2、IOC理念" class="headerlink" title="2.2、IOC理念"></a>2.2、IOC理念</h3><p>那我们现在修改一下，把UserDao的实现类增加一个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoMysqlImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql获取用户数据！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着我们要去使用Mysql的话，就需要去Service实现类里面修改对应的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">       <span class="comment">/* private UserDao userDao=new UserDaoImpl();*/</span></span><br><span class="line">      <span class="keyword">private</span> UserDao userDao=<span class="keyword">new</span> <span class="title class_">UserDaoMysqlImpl</span>();</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再假设我们又增加一个Userdao的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoOracleImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle获取用户数据！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们要使用Oracle，又需要去service实现类里面修改对应的实现，假设我们的这种需求量非常大，这种方式就根本不适用，甚至反人类对吗，每次变动，都需要修改大量的代码，这种设计的耦合性太高，牵一发而动全身。</p><p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，需要根据用户的需求去修改源代码，如果程序代码量十分大，修改一次的成本代码十分昂贵！</p><p><img src="E:\博客文档\image-20220416143827087.png" alt="image-20220416143827087"></p><p><strong>那么我们如何去解决这个问题呢？</strong></p><p>我们可以在需要他的地方，不去实现它，而是留出一个接口，利用set</p><p>我们使用一个Set接口实现,已经发生了&#x3D;&#x3D;革命性的变化&#x3D;&#x3D;！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">        <span class="comment">//利用set进行动态值的注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，Dao层他们不需要接触！</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        ((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> <span class="title class_">UserDaoMysqlImpl</span>());</span><br><span class="line">        userService.getUser();</span><br><span class="line">        <span class="comment">//那我们现在又想用Oracle去实现哪？</span></span><br><span class="line">         ((UserServiceImpl) userService).setUserDao(<span class="keyword">new</span> <span class="title class_">UserDaoOracleImpl</span>());</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="E:\博客文档\image-20220416143927052.png" alt="image-20220416143927052"></p><ul><li>大家发现了区别没有？可能很多人说没啥区别，但是他们已经发生了根本性的变化，很多地方都不一样，仔细去思考一下，以前所有东西都是由程序猿去进行控制创建，而现在是由我们自行控制创建对象，把主动权交给了调用者，程序不用去管怎么创建、怎么实现了，它只负责提供一个接口。</li></ul><h3 id="2-3、IOC的本质"><a href="#2-3、IOC的本质" class="headerlink" title="2.3、IOC的本质"></a>2.3、IOC的本质</h3><ul><li><p>之前，程序是主动创建对象，控制权在程序猿手上。</p></li><li><p>使用了set注入后，程序不再具有主动性，而是变成了被动地接受对象。</p></li><li><p>这种思想从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低，可以更加专注地在业务的实现上！这是IOC的原型。</p></li><li><p>&#x3D;&#x3D;IOC本质：控制反转IOC(Inversion of Contron)，是一种设计思想，DI（依赖注入）是实现IOC的一种方法。&#x3D;&#x3D;也有人认为DI只是IOC的另一种说法。没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓的控制反转就是：获得依赖对象的方式反转了。</p><p><img src="E:\博客文档\image-20220416144238710.png" alt="image-20220416144238710"></p></li><li><p>IOC是Spring框架的核心内容，使用多种方式完美地实现了IOC，可以使用XML配置，也可以使用注解，新版本的spring也可以零配置实现IOC.</p></li><li><p>Spring容器在初始化时先读取配置文件，根据配置文件或者元数据创建与组织对象存入容器中，程序使用时再从IOC容器中取出需要的对象。</p><p><img src="E:\博客文档\image-20220416144750106.png" alt="image-20220416144750106"></p><p><img src="E:\博客文档\image-20220416145444759.png" alt="image-20220416145444759"></p></li><li><p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到零配置的目的。</p></li><li><p>&#x3D;&#x3D;控制反转的一种通过描述（XML或者注解）并通过第三方去生产或获得特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（Dependency Injection,DI）.&#x3D;&#x3D;</p></li></ul><h2 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h2><h5 id="Hello-java文件"><a href="#Hello-java文件" class="headerlink" title="Hello.java文件"></a>Hello.java文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStr</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用Spring来创建对象，在Spring中这些都称为Bean</span></span><br><span class="line"><span class="comment">    类型  变量名  ＝  new 类型（）；</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new 的对象</span></span><br><span class="line"><span class="comment">     bean = 对象  new Hello();</span></span><br><span class="line"><span class="comment">    propery 相当于对对象赋值</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中管理了，要使用，直接去里面取出来就可以了</span></span><br><span class="line">        <span class="type">Hello</span> <span class="variable">hello</span> <span class="operator">=</span> (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考问题？</p><ul><li><p>Hello对象是谁创建的？</p><p>hello对象是由Spring创建的</p></li><li><p>Hello对象的属性是怎么设置的？</p><p>Hello对象的属性是由Spring容器设置的</p></li></ul><p>这个过程就叫控制反转：</p><p>控制：谁创建对象，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p><p>反转：程序本身不创建对象，而变成被动的接收对象。</p><p>依赖注入：就是利用set方法来进行注入的。</p><p>IOC是一种编程思想，由主动的编程变成被动的接收</p><p><strong>OK，到了现在，我们彻底不用再程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring来创建、管理、装配！</strong></p><h2 id="4、IOC创建对象的方式"><a href="#4、IOC创建对象的方式" class="headerlink" title="4、IOC创建对象的方式"></a>4、IOC创建对象的方式</h2><p>1.使用无参构造创建对象，默认。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure><p>2.假设要使用有参构造创建对象的方法。</p><ol><li><p>下标赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下标赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;陈州居士说Java&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类型</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种类型：通过类型创建，不建议使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下标赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;陈州居士&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>参数名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种类型：直接通过参数名来设置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dumingqing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</p></li></ol><h2 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h2><h4 id="5-1、别名"><a href="#5-1、别名" class="headerlink" title="5.1、别名"></a>5.1、别名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果使用了别名，我们也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2、Bean的配置"><a href="#5-2、Bean的配置" class="headerlink" title="5.2、Bean的配置"></a>5.2、Bean的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> id:bean 的唯一标识符，也就是相当于“对象名”</span></span><br><span class="line"><span class="comment"> class:bean 对象所对应的全限定名：包名+类名</span></span><br><span class="line"><span class="comment"> name:也是别名，而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2,u3;u4&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中华人民共和国&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3、Import"><a href="#5-3、Import" class="headerlink" title="5.3、Import"></a>5.3、Import</h4><p>import一般用于团队开发使用，它可以将多个配置文件导入合并为一个。</p><p>假设现在这个项目有三个人在开发，这三个人有不同的类开发，不同的类需要注册在不同的Bean中，我们可以利用import 将所有人的beans.xml合并为一个总的applicationContext.xml，使用的时候直接使用总的就可以了！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans3.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6、依赖注入"><a href="#6、依赖注入" class="headerlink" title="6、依赖注入"></a>6、依赖注入</h2><h3 id="6-1、构造器注入"><a href="#6-1、构造器注入" class="headerlink" title="6.1、构造器注入"></a>6.1、构造器注入</h3><p>前面已经讲过了</p><h3 id="6-2、Set方式注入-x3D-x3D-重点-x3D-x3D"><a href="#6-2、Set方式注入-x3D-x3D-重点-x3D-x3D" class="headerlink" title="6.2、Set方式注入[&#x3D;&#x3D;重点&#x3D;&#x3D;]"></a>6.2、Set方式注入[&#x3D;&#x3D;重点&#x3D;&#x3D;]</h3><h4 id="6-3-1、依赖注入：Set注入"><a href="#6-3-1、依赖注入：Set注入" class="headerlink" title="6.3.1、依赖注入：Set注入"></a>6.3.1、依赖注入：Set注入</h4><ul><li>依赖：bean对象的创建依赖于容器</li><li>注入：bean对象中所有的属性由容器创建</li></ul><h4 id="6-3-2、环境搭建"><a href="#6-3-2、环境搭建" class="headerlink" title="6.3.2、环境搭建"></a>6.3.2、环境搭建</h4><ol><li><p>复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br></pre></td></tr></table></figure></li><li><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种，普通值注入，value--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dumingqing&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完善注入信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Student&#123;        *&#123;</span></span><br><span class="line"><span class="comment">        * name=&#x27;dumingqing&#x27;,</span></span><br><span class="line"><span class="comment">        * address=Address&#123;address=&#x27;河南淮阳&#x27;&#125;,</span></span><br><span class="line"><span class="comment">        * books=[红楼梦, 西游记, 水浒传, 三国演义],</span></span><br><span class="line"><span class="comment">        * hobbys=[学习计算机, 练功, 写东西, 运动, 睡觉],</span></span><br><span class="line"><span class="comment">        * card=&#123;</span></span><br><span class="line"><span class="comment">        *       身份证=410909196509252888,</span></span><br><span class="line"><span class="comment">        *       银行卡=600188899977766677,</span></span><br><span class="line"><span class="comment">         *       医保卡=123456789012345678</span></span><br><span class="line"><span class="comment">         *       &#125;,</span></span><br><span class="line"><span class="comment">        * games=[象棋, 斗地方, 跑得快],</span></span><br><span class="line"><span class="comment">        * wife=&#x27;null&#x27;,</span></span><br><span class="line"><span class="comment">        * info=&#123;</span></span><br><span class="line"><span class="comment">        *   班级=测83二班,</span></span><br><span class="line"><span class="comment">        *   password=123456,</span></span><br><span class="line"><span class="comment">        *   url=男,</span></span><br><span class="line"><span class="comment">        *   driver=20220417,</span></span><br><span class="line"><span class="comment">        *   username=root</span></span><br><span class="line"><span class="comment">        *   &#125;</span></span><br><span class="line"><span class="comment">        *&#125;</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>beans.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;河南淮阳&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--第一种，普通值注入，value--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dumingqing&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--第二种：Bean注入，ref--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--第三种：数组注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--List集合--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbys&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>学习计算机<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>练功<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>写东西<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>运动<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--Map--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;410909196509252888&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;600188899977766677&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;医保卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789012345678&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--Set--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>象棋<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>斗地方<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>跑得快<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--wife null--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--Properties--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>20220417<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;班级&quot;</span>&gt;</span>测83二班<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="6-3、拓展方式注入"><a href="#6-3、拓展方式注入" class="headerlink" title="6.3、拓展方式注入"></a>6.3、拓展方式注入</h4><p>我们可以使用p命名空间和c命名空间进入注入</p><p>官方解释：</p><p><img src="E:\博客文档\image-20220417143933539.png" alt="image-20220417143933539"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--p命名空间注入，可以直接注入属性的值：property--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;杜明清&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;56&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--c命名空间注入，通过构造器注入：construct-args--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;userbeans.xml&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span>  context.getBean(<span class="string">&quot;user2&quot;</span>,User.class);</span><br><span class="line"></span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意点：p命名空间和c命名空间不能直接使用，需要导入xml约束！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</span><br></pre></td></tr></table></figure><h3 id="6-4、bean的作用域"><a href="#6-4、bean的作用域" class="headerlink" title="6.4、bean的作用域"></a>6.4、bean的作用域</h3><p>When you create a bean definition, you create a recipe （处方; 秘诀）for creating actual instances of the class defined by that bean definition. The idea that a bean definition is a recipe is important, because it means that, as with a class, you can create many object instances from a single recipe.</p><p>You can control not only the various dependencies and configuration values that are to be plugged into an object that is created from a particular bean definition but also control the scope of the objects created from a particular（特定的） bean definition. This approach is powerful and flexible, because you can choose the scope of the objects you create through configuration instead of having to bake in the scope of an object at the Java class level. Beans can be defined to be deployed in one of a number of scopes. The Spring Framework supports six scopes, four of which are available only if you use a web-aware <code>ApplicationContext</code>. You can also create <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-custom">a custom scope.</a></p><table><thead><tr><th>Scope</th><th>Description</th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton">singleton</a></td><td>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.（单例）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype">prototype</a></td><td>Scopes a single bean definition to any number of object instances.（原型）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request">request</a></td><td>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session">session</a></td><td>Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application">application</a></td><td>Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope">websocket</a></td><td>Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><ol><li><p>单例模式（singleton）spring默认机制</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;china&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>原型模式（prototype）:每次从容器中get的时候，都会产生一个新对象。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.something.DefaultAccountService&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>其余的request,session,application, 这些只能在web开发中使用。</p></li></ol><h2 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h2><ul><li>自动装配是Spring满足bean依赖的一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性。</li></ul><h3 id="7-1、在Spring中有三种装配的方式"><a href="#7-1、在Spring中有三种装配的方式" class="headerlink" title="7.1、在Spring中有三种装配的方式"></a>7.1、在Spring中有三种装配的方式</h3><ol><li>在xml中显式的配置</li><li>在java中显式的配置</li><li>隐式的自动装配bean[&#x3D;&#x3D;重要&#x3D;&#x3D;]</li></ol><h3 id="7-2、测试"><a href="#7-2、测试" class="headerlink" title="7.2、测试"></a>7.2、测试</h3><p>环境搭建：一个人有两个宠物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wang~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shout</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;miao~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Person&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;person&quot;</span>, Person.class);</span><br><span class="line">        person.getDog().shout();</span><br><span class="line">        person.getCat().shout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3、ByName自动装配"><a href="#7-3、ByName自动装配" class="headerlink" title="7.3、ByName自动装配"></a>7.3、ByName自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ByName:会自动在容器一下文中查找和自己对象set方法后面的值对应的beanid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4、byType自动装配"><a href="#7-4、byType自动装配" class="headerlink" title="7.4、byType自动装配"></a>7.4、byType自动装配</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--byName:会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--byType:会自动在容器上下文中查找，和自己对象属性类型相同的bean--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-5、小结"><a href="#7-5、小结" class="headerlink" title="7.5、小结"></a>7.5、小结</h3><ul><li>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致。</li><li>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致。</li></ul><h3 id="7-6、使用注解实现自动装配"><a href="#7-6、使用注解实现自动装配" class="headerlink" title="7.6、使用注解实现自动装配"></a>7.6、使用注解实现自动装配</h3><p>jdk1.5支持注解。Spring2.5就支持注解。</p><p>要使用注解须知：</p><ol><li><p>导入约束:xmlns:context&#x3D;”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></p></li><li><p>配置注解的支持:&#x3D;&#x3D;<a href="context:annotation-config/">context:annotation-config/</a>&#x3D;&#x3D;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>Autowired（自动装配，注解）</strong></p><p>直接在属性上使用，也可以在set方法上使用。</p><p>使用Autowired可以不编写Set方法了，前提是你这个自动装配的属性在IOC容器中存在，且符合名字byname.</p></li><li><p>科普：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Nullable  字段标记了这个注解，说明这个字段可以为null;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">//如果显式定义了autowired的required属性为false,</span></span><br><span class="line">    <span class="comment">// 说明这个对象可以为null,否则不允许为空</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果@AutoWired自动装配属性的环境比较复杂，自动装配无法通过一个注解[Autowired]完成的时候，可使用@Qualifier(value&#x3D;”xxx”)配合使用，指定一个唯一的bean对象注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Cat cat;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Qualifier(value = &quot;dog222&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> Dog dog;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>@Resource注解</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.du.pojo.Person&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>@Resource和Autowired的区别：<ul><li>都是用来自动装配的，都可以放在属性字段上</li><li>@Autowired 通过byType的方式实现，而且必须要求对象存在。</li><li>@Resource默认通过byname的方式实现，如果找不到名字，则通过byType实现。如果都找不到则报错。</li><li>执行顺序不同：@Autowired通过byType的方式实现。@Resource默认通过byname的方式实。</li></ul></li></ol><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><p>在Spring4之后，要使用注解开发，必须要保证aop的包导入了</p><p><img src="E:\博客文档\image-20220418111045909.png" alt="image-20220418111045909"></p><p>使用注解需要导入context约束，增加注解的支持。</p><ol><li><p>bean</p></li><li><p>属性如何注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于 &lt;bean id=&quot;user&quot; class=&quot;com.du.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="comment">//@Component组件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;xxx&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;中华人民共和国&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>衍生的注解：@Component有几个衍生注解，在web开发中，会按照mvc三层架构分层。</p><ul><li>dao  [@Repository]</li><li>service [@Service]</li><li>controller [@Controller]</li></ul><p>这四个注解功能都是一样的，都是代表将某个类注册到Spring中，装配Bean。</p></li><li><p>自动装配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- @Autowired :自动装配通过类型</span><br><span class="line">    如果Autowired不能唯一自动装配上属性，则需要通过@Qualifier(value=&quot;xxx&quot;)</span><br><span class="line">- @Nullable  字段标记了这个注解，说明这个字段可以为null;</span><br><span class="line">- @Resource :自动装配通过类名字、类型</span><br></pre></td></tr></table></figure></li><li><p>作用域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//相当于&lt;property name=&quot;name&quot; value=&quot;xxx&quot;/&gt;</span></span><br><span class="line">    <span class="meta">@Value(&quot;中华人民共和国&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>小结  ：xml与注解</p><ul><li><p>xml更加万能，适用于任何场合。维护简单方便。</p></li><li><p>注解不是自己的类使用不了，维护相对复杂。</p></li><li><p>xml与注解的最佳实践：xml用来管理bean;注解只负责完成属性的注。</p></li><li><p>注意开启注解支持。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.du&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="9、使用Java的方式配置Spring"><a href="#9、使用Java的方式配置Spring" class="headerlink" title="9、使用Java的方式配置Spring"></a>9、使用Java的方式配置Spring</h2><p>我们现在要完全不使用Spring的xml配置了，全权交给Java来做。JavaConfig是Spring的一个子项目，在Spring4之后，它变成了一个功能。</p><p><img src="E:\博客文档\image-20220418153424247.png" alt="image-20220418153424247"></p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/这里这个注解的意思，是说这个类被Spring接管了，注册到了容器中了</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;Dumingqing&quot;)</span> <span class="comment">//属性注入值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个也会被Spring容器接管，注册到容器中，因为它也是一个@Component</span></span><br><span class="line"><span class="comment">//@Configuration代表这是一个配置类，就和之前看到的beans.xml一样的</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.du.pojo&quot;)</span></span><br><span class="line"><span class="meta">@Import(DuConfig2.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DuConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册一个bean,相当于之前的bean标签</span></span><br><span class="line">    <span class="comment">//这个方法的名字，相当于bean标签中的id属性</span></span><br><span class="line">    <span class="comment">//这个方法的返回值，相当于bean标签中的class属性</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//就是返回要注入到bean的对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DuConfig2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//如果使用了配置类方式去做，我们就得使用AnnotationConfig上下文来获取容器</span></span><br><span class="line">        <span class="comment">//通过配置类的class对象加载</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(DuConfig.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">getUser</span> <span class="operator">=</span> (User) context.getBean(<span class="string">&quot;getUser&quot;</span>);</span><br><span class="line">        System.out.println(getUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种纯Java的配置方式，在SpringBoot中随处可见。</p><h2 id="10、代理模式"><a href="#10、代理模式" class="headerlink" title="10、代理模式"></a>10、代理模式</h2><p>为什么要学习代理模式？因为这就是SpringAOP的底层。[Springaop和SpringMVC]</p><p>代理模式分类：</p><ul><li><p>静态代理</p></li><li><p>动态代理</p><p><img src="E:\博客文档\image-20220418180132365.png" alt="image-20220418180132365"></p></li></ul><h3 id="10-1、静态代理"><a href="#10-1、静态代理" class="headerlink" title="10.1、静态代理"></a>10.1、静态代理</h3><p>角色分析：</p><ul><li>抽象角色：一般会使用接口或者抽象类来解决</li><li>真实角色：被 代理的角色</li><li>代理角色：代理真实的角色，代理真实的角色后，我们一般会做一些附属的损伤</li><li>客户：访问代理对象的人</li></ul><p>代码步骤：</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Rent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Host</span>  <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Rent</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Proxy</span><span class="params">(Host host)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//签合同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hetong</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户端访问代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//房东要出租房子</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Host</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理，中介帮房东出租房子，但是呢？中介（代理）一般会有一些附属操作</span></span><br><span class="line">        <span class="type">Proxy</span> <span class="variable">proxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(host);</span><br><span class="line">        <span class="comment">//你不用面对房东，直接找中介租房子即可！</span></span><br><span class="line">        proxy.rent();</span><br></pre></td></tr></table></figure></li></ol><p>代理模式的好处 ：</p><ul><li>可以使真实角色的操作更加纯粹，不用去关注一些公共的业务。</li><li>公共也就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理。</li></ul><p>缺点：</p><ul><li>一个真实角色就会产生一个代理角色，代码量会翻倍，开发效率低。</li></ul><h3 id="10-2、加深理解"><a href="#10-2、加深理解" class="headerlink" title="10.2、加深理解"></a>10.2、加深理解</h3><p>代码:对应08-demo02</p><p>聊聊AOP</p><p><img src="E:\博客文档\image-20220419091037237.png" alt="image-20220419091037237"></p><h3 id="10-3、动态代理"><a href="#10-3、动态代理" class="headerlink" title="10.3、动态代理"></a>10.3、动态代理</h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的类是动态生成的,不是我们直接写好的</li><li>动态代理分为两大类:基于接口的动态代理;基于类的动态代理<ul><li>基于接口–JDK动态代理【我们在这里使用】</li><li>基于类:cglib</li><li>基于java 字节码实现:javasist</li></ul></li></ul><p>需要了解两个类:Proxy(代理), InvocationHandler(调用处理程序)</p><p>动态代理的好处:</p><ul><li>可以使真实的角色的操作更加纯粹,不用去关注一些公共的业务</li><li>公共也就交给代理角色,实现了业务的分工</li><li>公共业务发生 扩展的时候,方便集中管理.</li><li>一个动态代理类代理的是一个接口,一般就是对应的一类业务</li><li>一个动态代理可以代理多个类,只要是实现了同一个接口即可</li></ul><h2 id="11、AOP"><a href="#11、AOP" class="headerlink" title="11、AOP"></a>11、AOP</h2><h3 id="11-1、什么是AOP"><a href="#11-1、什么是AOP" class="headerlink" title="11.1、什么是AOP"></a>11.1、什么是AOP</h3><p>AOP(Aspect Oriented Programming)意为面向切面编程,通过预编译方式和支行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续,是软件开发中的一个热点,也是Spring框架中的一个重要内容,是  函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离,从而使得业务逻辑各部分之间的耦合度降低,提高程序的可重用性,同时提高了开发的效率。</p><p><img src="E:\博客文档\image-20220419141746994.png" alt="image-20220419141746994"></p><h4 id="11-2、Aop在Spring中的作用"><a href="#11-2、Aop在Spring中的作用" class="headerlink" title="11.2、Aop在Spring中的作用"></a>11.2、Aop在Spring中的作用</h4><p>提供声明式事务;允许用户自定义切面</p><ul><li>横切关注点:跨越应用程序多个模块的方法或功能。既是,与我们业务逻辑无关的,但是我们需要处理的部分,就是横切关注点。如日志,安全,缓存,事务等……</li><li>切面(ASPECT):横切关注点被模块化的特殊对象,即,它是一个类。</li><li>通知(Advice):切面必须完成的工作。即,它是类中的一个方法。</li><li>目标(Target):被通知的对象。</li><li>代理(Proxy):向目标对象应用通知之后创建的对象。</li><li>切入点(PointCut):切面通知执行的”地点”的定义。</li><li>连接点(JointPoint):与切入点匹配的执行点。</li></ul><p><img src="E:\博客文档\image-20220419143235729.png" alt="image-20220419143235729"></p><p>SpringAOP中,通过Advice定义横切面逻辑,Spring中支持5种类型的advice:</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置方式</td><td>方法前</td><td>org.springframework.aop.MethodBeforeAdvice</td></tr><tr><td>后置方法</td><td>方法后</td><td>org.springframework.aop.AfterReturningAdvice</td></tr><tr><td>环绕通知</td><td>方法前后</td><td>org.aopalliance.intercept.MethodInterceptor</td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td>org.springframework.aop.ThrowsAdvice</td></tr><tr><td>引介通知</td><td>类中增加新的方法属性</td><td>org.springframework.aop.IntroductionInterceptor</td></tr></tbody></table><p>即在Aop在不改变原有代码的情况下,去增加新的功能。</p><h4 id="11-3、使用Spring实现Aop"><a href="#11-3、使用Spring实现Aop" class="headerlink" title="11.3、使用Spring实现Aop"></a>11.3、使用Spring实现Aop</h4><p>【重点】使用AOP 织入,需要导入一个依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式一:使用Spring的API接口【主要SpringAPI接口实现】</p><p>方式二:自定义来实现AOP 【主要是切面定义】</p><p>方式三:使用注解实现</p><h2 id="12、整合Mybatis"><a href="#12、整合Mybatis" class="headerlink" title="12、整合Mybatis"></a>12、整合Mybatis</h2><p>整合步骤:</p><ol><li>导入相关jar包<ul><li>junit</li><li>mybatsi</li><li>mysql数据库</li><li>spring相关</li><li>aop织入</li><li>mybatsi-spring【new】</li></ul></li><li>编写配置</li><li>测试</li></ol><h3 id="12-1、回忆Mybatis"><a href="#12-1、回忆Mybatis" class="headerlink" title="12.1、回忆Mybatis"></a>12.1、回忆Mybatis</h3><ol><li>编写实体类</li><li>编写核心配置文件</li><li>编写接口</li><li>编写Mapper.xml</li><li>测试</li></ol><h3 id="12-2、Mybatis-Spring"><a href="#12-2、Mybatis-Spring" class="headerlink" title="12.2、Mybatis-Spring"></a>12.2、Mybatis-Spring</h3><p>What is MyBatis-Spring?</p><p>MyBatis-Spring integrates MyBatis seamlessly with Spring. This  library allows MyBatis to participate(参与) in Spring transactions, takes care of building MyBatis mappers and <code>SqlSession</code>s and inject them into other beans, translates MyBatis exceptions into Spring <code>DataAccessException</code>s, and finally, it lets you build your application code free of dependencies on MyBatis, Spring or MyBatis-Spring.</p><ol><li>编写数据源配置</li><li>sqlSessionFactory</li><li>sqlSessionTemplate</li><li>需要给接口加实现类【】</li><li>将写好的实现类注入到Spring中</li><li>测试</li></ol><h2 id="13、声明式事务"><a href="#13、声明式事务" class="headerlink" title="13、声明式事务"></a>13、声明式事务</h2><h3 id="1、回顾事务"><a href="#1、回顾事务" class="headerlink" title="1、回顾事务"></a>1、回顾事务</h3><ul><li>要么都成功,要么都失败</li><li>事务在项目开发中十分重要,涉及到数据的一致性问题,不能马虎</li><li>确保完整性和一致性</li></ul><p>事务的ACID原则:</p><ul><li>原子性</li><li>一致性</li><li>隔离性:多个业务可能操作一个资源,防止数据损坏</li><li>持久性:事务一旦提交,无论系统发生什么问题,结果都不会再普查影响,被 持久化地写到存储器中。</li></ul><h3 id="2、Spring中事务管理"><a href="#2、Spring中事务管理" class="headerlink" title="2、Spring中事务管理"></a>2、Spring中事务管理</h3><ul><li>声明式事务:    AOP</li><li>编程式事务:    需要在代码中进行事务的管理</li></ul><h3 id="3、思考-为什么需要事务"><a href="#3、思考-为什么需要事务" class="headerlink" title="3、思考:为什么需要事务?"></a>3、思考:为什么需要事务?</h3><ul><li>如果不配置事务,可能存在数据提交不一致的情况;</li><li>如果我们不在spring中去配置声明式事务,我们就需要在代码中手动配置事务;</li><li>事务在项目的开发中十分重要,涉及到数据的一致性和完整性问题,不容马虎!</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一天天的生命</title>
    <link href="https://dumingqing.github.io/2022/04/15/%E4%B8%80%E5%A4%A9%E5%A4%A9%E7%9A%84%E7%94%9F%E5%91%BD/"/>
    <id>https://dumingqing.github.io/2022/04/15/%E4%B8%80%E5%A4%A9%E5%A4%A9%E7%9A%84%E7%94%9F%E5%91%BD/</id>
    <published>2022-04-15T00:56:10.000Z</published>
    <updated>2022-04-20T10:33:40.095Z</updated>
    
    <content type="html"><![CDATA[<p>生命是由一天天组成的，因此我们可以称自己的生命为一天的生命，一月的生命，一年的生命……如果我们要把常说的珍惜生命落到实处，那应得从一年做起，一月做起，一天做起……</p><p>一天的光阴是由日月星辰的转动而来，所拥有的光明则是太阳燃烧着自己所释放。人生看似无穷无尽，实则是可以很容易算出来的，人生一世，可能最值珍惜地就是这一天天的光阴了，特别是这健康的、能做点事情的光阴！</p><p>早晨在先在功态中开始两个小时的生活，清晰呀！头脑，全身憋屈的、麻木的细胞舒展开了,尽情地吸食着养分，还伴随着咔咔的响声，一遍遍地重复着这种感觉，我知道这是在修复。阵阵的毒素从身体中排出，甚至能够闻到其异味了，各种病变之源——毒素，排完之日也就意味着修炼之修身环节有了成效了。</p><p>一个半小时后的修炼最值得珍惜，虽然当时感觉难忍，但想想不是一天天的照样过来吗？也就坚持下来了，其实那最难忍的一段时光，才是最值得珍惜的时光，那所谓的“难忍”也就是一道坎，过去了就又是一片新的天地，说大点也可能是人生的一个新的境界！坚定地跨过去，不但两个小时这个坎要跨过去，如果证明有必要，三小时的坎也要跨过去……，如果连这点都做到，谈何“修炼”二字。</p><p>一天天的也是一天一小景，一月一中景，一年一大景。那人生的无限风光将随着这一天天的光阴而逐渐展开，以前那朦胧的、迷雾般的景象，也在徐徐地现出了庐山真面目！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生命是由一天天组成的，因此我们可以称自己的生命为一天的生命，一月的生命，一年的生命……如果我们要把常说的珍惜生命落到实处，那应得从一年做起，一月做起，一天做起……&lt;/p&gt;
&lt;p&gt;一天的光阴是由日月星辰的转动而来，所拥有的光明则是太阳燃烧着自己所释放。人生看似无穷无尽，实则是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Mybatis课堂笔记</title>
    <link href="https://dumingqing.github.io/2022/04/15/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
    <id>https://dumingqing.github.io/2022/04/15/Mybatis%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</id>
    <published>2022-04-15T00:56:10.000Z</published>
    <updated>2022-04-20T10:57:58.257Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><span id="more"></span><h1 id="Mybatis课堂笔记"><a href="#Mybatis课堂笔记" class="headerlink" title="Mybatis课堂笔记"></a>Mybatis课堂笔记</h1><h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境:</p><p>-　JDK1.8<br>-　Mysql5.7<br>-　maven3.6.1<br>-　IDEA</p><p>回顾:</p><ul><li>JDBC</li><li>Mysql</li><li>java基础</li><li>Maven</li><li>Junit</li></ul><p>框架:配置文件的。最好的方式:看官网文档;</p><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><h3 id="1-1、什么是Mybatis"><a href="#1-1、什么是Mybatis" class="headerlink" title="1.1、什么是Mybatis"></a>1.1、什么是Mybatis</h3><p><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis logo"></p><p>MyBatis is a first class persistence framework with support for          custom SQL,          stored procedures and advanced mappings. MyBatis          eliminates almost          all of the JDBC code and manual setting of          parameters and retrieval          of results. MyBatis can use simple XML or          Annotations for          configuration and map primitives, Map interfaces and          Java POJOs          (Plain Old Java Objects) to database records</p><p>如何获得Mybatis?</p><ul><li><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Github:  <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p></li><li><p>中方文档:　<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><h3 id="1-2、持久层"><a href="#1-2、持久层" class="headerlink" title="1.2、持久层"></a>1.2、持久层</h3><p>数据持久化:</p><p>-　持久化就是将程序的数据在持久状态和瞬时状态转化的过程<br>-　内存:<strong>断电即失</strong><br>-　数据库(jcbc),io文件持久化<br>-　生活:冷藏.罐头</p><h5 id="为什么需要持久化"><a href="#为什么需要持久化" class="headerlink" title="为什么需要持久化?"></a>为什么需要持久化?</h5><p>-　有一些对象,还能让他丢失。<br>-　内存太贵了</p><h3 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h3><p>Dao层,Service层,Controller层……</p><p>-　完成持久化工作的代码块<br>-　层界限十分明显。</p><h3 id="1-4、为什么需要Mybatis"><a href="#1-4、为什么需要Mybatis" class="headerlink" title="1.4、为什么需要Mybatis?"></a>1.4、为什么需要Mybatis?</h3><ul><li><p>方便</p></li><li><p>传统的JDBC代码太复杂了。简化,框架。自动化。</p></li><li><p>帮助程序员钭数据存入到数据库中。</p></li><li><p>不用Mybatis也可以。更容易上手。<strong>技术没有高低之分</strong></p></li><li><p>优点:</p><ul><li>简单易学</li><li>灵活</li><li>sql和代码的分离,提高了可维护性</li><li>提供映射标签,支持对象与数据的orm字段关系映射</li><li>提供对象关系映射标签,支持对象关系组建维护</li><li>提供xml标签,支持编写动态sql</li></ul><p><strong>最重要的一点:使用的人多!</strong></p><p>Spring SpringMVC SpringBoot</p></li></ul><h2 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h2><p>思路:搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试!</p><h4 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h4><p>搭建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`</span><br><span class="line">CREATE TABLE `user` (</span><br><span class="line">`id` INT(20) NOT NULL PRIMARY KEY,</span><br><span class="line">`name` VARCHAR(30) DEFAULT NULL,</span><br><span class="line">`pwd` VARCHAR(30) DEFAULT NULL</span><br><span class="line">)ENGINE-INNODB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO `user`(`id`.`name`,`pwd`) VALUES</span><br><span class="line">(1,&#x27;狂神&#x27;,&#x27;1234567&#x27;),</span><br><span class="line">(2,&#x27;张三&#x27;,&#x27;1234567&#x27;),</span><br><span class="line">(3,&#x27;李四&#x27;,&#x27;1234567&#x27;)</span><br></pre></td></tr></table></figure><p>1.　新建一个普通的maven项目</p><ol start="2"><li><p>删除src目录</p></li><li><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.35<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    //双星表示当前文件夹中的所有文件夹</span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h4><ul><li><p>编写mybatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/du/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写mybatis的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.du.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory --&gt; sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory ;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步:获取sqlSessionFactory对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Now that you have a SqlSessionFactory, as the name suggests,</span></span><br><span class="line"><span class="comment"> you can acquire an instance of SqlSession. The SqlSession</span></span><br><span class="line"><span class="comment"> contains absolutely every method needed to execute SQL commands</span></span><br><span class="line"><span class="comment">  against the database. You can execute mapped SQL statements</span></span><br><span class="line"><span class="comment">   directly against the SqlSession instance. For example:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h3><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.du.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name, String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPwd</span><span class="params">(String pwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>-　接口实现类由原来的UserDaoImpl转变为一个Mapper配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.du.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h3><p>注意点:</p><p>org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. </p><p>MapperRegistry是什么?</p><p>核心配置文件中注册Mappers</p><p>java.lang.ExceptionInInitializerError</p><ul><li><p>Junit测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//第一步获得SqlSession对象</span></span><br><span class="line">       SqlSession sqlSession= MybatisUtils.getSqlSession();</span><br><span class="line">       <span class="comment">//方式一:getMapper</span></span><br><span class="line">      UserDao userDao= sqlSession.getMapper(UserDao.class);</span><br><span class="line">       List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">  </span><br><span class="line">       <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//关闭sqlSession</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><p>可能遇到的问题:</p><p>1.　配置文件没有注册<br>2.　绑定接口错误<br>3.　方法名不对<br>4.　返回类型不对<br>5.　Maven导出资源问题</p><h2 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h2><h3 id="1-、namespase"><a href="#1-、namespase" class="headerlink" title="1)、namespase"></a>1)、namespase</h3><p>namespase中的包名要和Dao&#x2F;mapper接口的包名一致!</p><h3 id="2-、select"><a href="#2-、select" class="headerlink" title="2)、select"></a>2)、select</h3><ul><li>id:就是对应的namespace中的方法名;</li><li>resultType:Sql语句执行的返回值!</li><li>parameterType:参数类型!</li></ul><ol><li><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据ID查询用户</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写对应的mapper中的sql语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">getUserById</span><span class="params">()</span>&#123;</span><br><span class="line">        SqlSession sqlSession=MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-、Insert"><a href="#3-、Insert" class="headerlink" title="3)、Insert"></a>3)、Insert</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性可以直接取出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-、update"><a href="#4-、update" class="headerlink" title="4)、update"></a>4)、update</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.du.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-、delete"><a href="#5-、delete" class="headerlink" title="5)、delete"></a>5)、delete</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       delete from mybatis.user where id=#&#123;id&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点:</p><ul><li>增删改需要提交事务!</li></ul><h4 id="6-、错误分析"><a href="#6-、错误分析" class="headerlink" title="6)、错误分析"></a>6)、错误分析</h4><p>-　标签不要匹配错<br>-　<code>resource绑定mapper需要使用路径</code><br>-　程序配置文件必须符合规定<br>-　NullPointerException,没有注册到资源<br>-　输出的xml文件中存在中方乱码问题。<br>-　maven资源没有导出问题。</p><h4 id="7-、万能Map"><a href="#7-、万能Map" class="headerlink" title="7)、万能Map"></a>7)、万能Map</h4><p>假如实体类、数据库中表的字段或者参数过多,应当考虑使用Map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//万能Map</span></span><br><span class="line"><span class="type">int</span>  <span class="title function_">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;userid&#125;,#&#123;username&#125;,#&#123;passWord&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;passWord&quot;</span>,<span class="string">&quot;222222&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mapper.addUser2(map);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Map传递参数直接在sql中取出key即可!</p><p>对象传递参数直接在sql中取对象的属性即可!只有</p><p>只有一个基本类型参数的情况下,可以直接在sql中取到。</p><p>多个参数用Map,或者注解。</p><h4 id="8-、思考题"><a href="#8-、思考题" class="headerlink" title="8)、思考题"></a>8)、思考题</h4><p>模糊查询怎么写?</p><p>1、Java代码执行的时候,传递通配符%%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList = mapper.getUserLike(<span class="string">&quot;%李%&quot;</span>);</span><br></pre></td></tr></table></figure><p>2、在sql拼接中使用通配符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;</span><br></pre></td></tr></table></figure><h2 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h2><h3 id="4-1、核心配置文件"><a href="#4-1、核心配置文件" class="headerlink" title="4.1、核心配置文件"></a>4.1、核心配置文件</h3><ul><li><p>mybatis-config.xml</p></li><li><p>Mybatis的配置文件包含了会深深影响mybatis行为设置和属性的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   configuration(配置)</span><br><span class="line">properties(属性)</span><br><span class="line">   settings(设置)</span><br><span class="line">   typeAliases(类型别名)</span><br><span class="line">   typeHandlers(类型处理器)</span><br><span class="line">   objectFactory(对象工厂)</span><br><span class="line">   plugins(插件)</span><br><span class="line">   environments(环境变量)</span><br><span class="line">       environment</span><br><span class="line">           <span class="title function_">transactionManager</span>　<span class="params">(事务处理器)</span></span><br><span class="line">           dataSource(数据源)</span><br><span class="line">   databaseIdProvider(数据库厂商标识)</span><br><span class="line">   mappers(映射器)</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2、环境配置-environments"><a href="#4-2、环境配置-environments" class="headerlink" title="4.2、环境配置(environments)"></a>4.2、环境配置(environments)</h3><p>Mybatis 可以配置成适应多种环境MyBatis can be configured with multiple environments</p><p>记住:尽管可以配置成多个环境,但每个SqlSessionFactory实例只能选择一种环境。<strong>One important thing to remember though: While you can            configure multiple environments, you can only choose ONE per            SqlSessionFactory instance.</strong>    </p><p>学会使用配置多套运动环境。</p><p>Mybatis默认的事务管理器是JDBC,连接池:POOLED      </p><h3 id="4-3、属性-properties"><a href="#4-3、属性-properties" class="headerlink" title="4.3、属性(properties)"></a>4.3、属性(properties)</h3><p>可以通过properties属性来实现引用配置文件。</p><p>这些属性都是可以外部配置且可动态替换的,既可以在典型的java属性文件中配置,亦可通过properties元素的子元素来传递。[db.properties]</p><p>These are externalizable(可外部化的), substitutable (可替代的)properties that can be          configured in a typical Java Properties file instance, or passed in          through sub-elements of the properties element.</p><p>编写一个配置文件</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>在核心配置文件是引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以直接引入外部配置文件</li><li>可以在其中增加一些属性配置</li><li>如果两个文件有同一个字段,优先使用外部配置文件的。</li></ul><h3 id="4-4、别名-typeAliases"><a href="#4-4、别名-typeAliases" class="headerlink" title="4.4、别名(typeAliases)"></a>4.4、别名(typeAliases)</h3><ul><li><p>类型别名是为了java类型设置一个短的名字。</p></li><li><p>存在的意义仅在于用来减少类完全限定名的冗余。A type alias is simply a shorter name for a Java type. It’s only          relevant to the XML configuration and simply exists to reduce          redundant(冗余的,多余的) typing of fully qualified classnames. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.du.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以指定一个包名,Mybatis会在包名下面搜索需要的java Bean。You can also specify a package where MyBatis will search for          beans.比如:扫描实体类的包,它的默认别名就是这个类的类名,首字母小写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.du.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在实体类比较少的时候,使用第一种方式</p><p>如果实体类多,建议使用第二种。</p><p>第一种可以DIY,第二种则不能,但可在实体类上用注解定义别名:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-5、设置"><a href="#4-5、设置" class="headerlink" title="4.5、设置"></a>4.5、设置</h3><p>这是Mybatis中极其重要的调整设置,它们会改变mybatis的运行的行为。</p><p>logImpl—&gt;日志实现</p><p>cacheEnable–&gt;全局地开启或者关闭配置文件中所有映射器的缓存</p><p>lazyLoadingEnabled–&gt;延迟加载的全局开头,当开启时,所有关联对                                                        象都会延迟加载。</p><h3 id="4-6、其它配置"><a href="#4-6、其它配置" class="headerlink" title="4.6、其它配置"></a>4.6、其它配置</h3><p>-　typeHandlers<br>-　objectFactory<br>-　plugins插件<br>  -　mybatis-generator-core<br>  -　mybatis-plus<br>  -　通用mapper</p><h3 id="4-7、映射器-mappers"><a href="#4-7、映射器-mappers" class="headerlink" title="4.7、映射器(mappers)"></a>4.7、映射器(mappers)</h3><p>MapperRegistry:注册绑定mapper文件。</p><p>方式一:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/du/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二:使用class文件绑定注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--每一个Mapper.xml都需要在Mybatis核心配置文件中注册!--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.du.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三、使用扫描包进行注入绑定</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.du.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意点:方式二和方式三</p><p>-　接口和它的Mapper配置文件必须同名<br>-　接口和它的Mapper配置文件必须在同一个包</p><p>练习时间:</p><p>-　将数据库配置文件外部引入<br>-　实体类别名<br>-　保证UserMapper接口和UserMapper.xml改为一致,并且放到同一个包下。</p><h3 id="4-8、生命周期和作用域"><a href="#4-8、生命周期和作用域" class="headerlink" title="4.8、生命周期和作用域"></a>4.8、生命周期和作用域</h3><p>生命周期和作用域是到头重要的,因为错误的作用会导致非常严重的并发问题。It’s very important to understand the various scopes and lifecycles        classes we’ve discussed so far. Using them incorrectly can cause        severe concurrency problems.      </p><p><strong>SqlSessionFactoryBuild:</strong></p><p>一旦创建了SqlSessionFactoryy就不需要它了。This class can be instantiated, used and thrown away. There is no need          to keep it around once you’ve created your SqlSessionFactory.          Therefore the best scope for instances of SqlSessionFactoryBuilder          is method scope (i.e. a local method variable局部变量). You can reuse the          SqlSessionFactoryBuilder to build multiple SqlSessionFactory          instances, but it’s still best not to keep it around to ensure that          all of the XML parsing resources are freed up for more important          things.        </p><p><strong>SqlSessionFactory:</strong></p><p>Once created, the SqlSessionFactory should exist for the duration of          your application execution. There should be little or no reason to          ever dispose of it or recreate it. It’s a best practice (实践)to not          rebuild the SqlSessionFactory multiple times in an application run.          Doing so should be considered a “bad smell”(坏味道). Therefore the best          scope of SqlSessionFactory is &#x3D;&#x3D;application scope&#x3D;&#x3D;. This can be          achieved a number of ways. The simplest is to use a Singleton          pattern or Static Singleton pattern高亮快捷键CTRL + Shift + H </p><ul><li>SqlSessionFactory一旦创建就应该在应用的运动期间一直存在,没有任何理由丢弃它或者重新创建另一个实例。</li><li>SqlSessionFactory的最佳作用域是应用作用域。</li><li>最简单的就是使用模式或者静态单例模式。</li><li>说白了就是可以想象为:&#x3D;&#x3D;数据库连接池&#x3D;&#x3D;</li></ul><p><strong>SqlSession:</strong></p><p>Each thread should have its own instance of SqlSession. Instances of          SqlSession are not to be shared and are not thread safe. Therefore          the best scope is request or method scope. Never keep references to          a SqlSession instance in a static field or even an instance field          of a class. Never keep references to a SqlSession in any sort of          managed scope, such as HttpSession of the Servlet framework. If          you’re using a web framework of any sort, consider the SqlSession          to follow a similar scope to that of an HTTP request. In other          words, upon receiving an HTTP request, you can open a SqlSession,          then upon returning the response, you can close it. Closing the          session is very important. You should always ensure that it’s          closed within a finally block. The following is the standard          pattern for ensuring that SqlSessions are closed:        </p><p>-　连接到连接池的一个请求!<br>-　SqlSession的实例不是线程安全的,因此是不能被共享的,所以它的最佳作用域是请求或者方法作用域。<br>-　用完之后需要赶紧关闭,否则资源被占用!<br>-　这里的每一个Mapper就代表一个具体的业务!</p><h2 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h2><h3 id="5-1、问题"><a href="#5-1、问题" class="headerlink" title="5.1、问题"></a>5.1、问题</h3><p>新建一个项目,拷贝以前的,测试实体类不一致的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p>测试出现问题</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_131\bin\java.exe&quot;</span><br><span class="line">User&#123;id=1, name=&#x27;狂神&#x27;, password=&#x27;null&#x27;&#125;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//select * from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">//类型处理器</span><br><span class="line">//select id,name,pwd from mybatis.user where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><p>解决方法:</p><ul><li><p>起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select id, name, pwd as password from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-2、resultmap"><a href="#5-2、resultmap" class="headerlink" title="5.2、resultmap"></a>5.2、resultmap</h3><p>结果集映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id namepwd</span><br><span class="line">idnamepassword</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--column数据库中的字段,property实体类中的属性--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">   select *  from mybatis.user where id=#&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>resultMap</code> element is the most important and powerful element in MyBatis. It’s what allows you to          do away with 90% of the code that JDBC requires to retrieve data (数据提取)from <code>ResultSet</code>s, and in some cases          allows you to do things that JDBC does not even support. In fact, to write the equivalent code for          something like a join(连接) mapping for a complex statement could probably span (跨度,持续,范围)thousands of lines of          code. The design of the <code>ResultMap</code>s is such that simple statements don’t require explicit(显示) result          mappings at all, and more complex statements require no more than is absolutely necessary to          describe the relationships.</p><p>-　resultMap 元素是MyBatis中最重要最强大的元素<br>-　ResultMap的设计思想是:对于简单的语句根本不需要显式的结果映射,而对于复杂一点的语句只需要描述它们的关系就行了。<br>-　ResultMap最优秀的地方在于,虽然你已经对它相当了解了,但是根本就不需要显式地用到他们。</p><h2 id="6-日志"><a href="#6-日志" class="headerlink" title="6.日志"></a>6.日志</h2><h3 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h3><p>如果一个数据库,出现的异常,我们需要排错。日志就是最好的帮手</p><p>曾经:sout、debug</p><p>再在:日志工厂</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logimpl指定Mybatis所用日志的具体实现,未启动时将自动查找Specifies which logging implementation MyBatis should use. If this setting is not present logging implementation will be autodiscovered</span><br></pre></td></tr></table></figure><p>-　SLF4J | &#x3D;&#x3D;LOG4J&#x3D;&#x3D;(deprecated since 3.5.9) | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | &#x3D;&#x3D;STDOUT_LOGGING&#x3D;&#x3D; | NO_LOGGING              </p><p>在Mybatis中具体使用哪个日志实现,在设置中设定</p><p>STDOUT_LOGGING标准日志输出</p><p>在核心配置文件中配置日志:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">3583738.</span></span><br><span class="line">Setting autocommit to <span class="literal">false</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@36aefa]</span><br><span class="line">==&gt;  Preparing: select * from mybatis.user where id=? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 狂神, <span class="number">123456</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">User&#123;id=<span class="number">1</span>, name=<span class="string">&#x27;狂神&#x27;</span>, password=<span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">Resetting autocommit to <span class="literal">true</span> on JDBC Connection [com.mysql.jdbc.JDBC4Connection@36aefa]</span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@36aefa]</span><br><span class="line">Returned connection <span class="number">3583738</span> to pool.</span><br></pre></td></tr></table></figure><h2 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h2><ol><li>什么是log4j?</li></ol><p>-　Log4j是Apache的一个开源项目,通过使用Log4j,我们可以控制日志信息输送的目的地是控制台、文件、GUI组件(AWT和Swing 图形用户界面(Graphics User Interface, GUI) 是用户与程序交互的窗口,它比基于命令行的界面更直观并且更友好。)<br>-　我们可以控制每一条日志的输出格式;<br>-　通过定义每一条日志的输出级别,我们能够更加细致地控制日志的生成过程;<br>-　通过一个配置文件来灵活地进行配置,而不需要修改应用的代码。</p><ol start="2"><li>先导入log4j的包</li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--https://mvnrepository.com/artifact/log4j/log4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">depenency</span>&gt;</span> </span><br></pre></td></tr></table></figure><ol start="3"><li><p>log4j.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 设置###</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span> = <span class="string">DEBUG,stdout,file</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 输出信息到控制抬 ###</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span> = <span class="string">[%-5p] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; method:%l%n%m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### 文件输出相关设置###</span></span><br><span class="line"><span class="attr">log4j.appender.file</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="attr">log4j.appender.file.File</span> = <span class="string">E://logs/log.log</span></span><br><span class="line"><span class="attr">log4j.appender.file.Append</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">log4j.appender.file.Threshold</span> = <span class="string">DEBUG </span></span><br><span class="line"><span class="attr">log4j.appender.file.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.file.layout.ConversionPattern</span> = <span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125;  [ %t:%r ] - [ %p ]  %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="attr">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="attr">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><p><strong>简单使用</strong></p><ul><li><p>在要使用的Log4j的类中,导入包import prg.apache.log4j.Logger;</p></li><li><p>日志对象,参数为当前类的class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger=Logger.getLogger(UserMapperTest.class);</span><br></pre></td></tr></table></figure></li></ul><p>-　日志级别</p><p>-　&#96;&#96;&#96;java<br>  logger.info(“info:进入了testlog4j”);<br>  logger.debug(“debug:进入了testlog4j”);<br>  logger.error(“error:进入了testlog4j”);<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 7、分页</span><br><span class="line"></span><br><span class="line">思考:为什么分页?</span><br><span class="line"></span><br><span class="line">减少数据的处理量</span><br><span class="line"></span><br><span class="line">### 7.1、使用Limit分页</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">语法:SELECT　*from user limit startIdex,pageSize</span><br><span class="line">select * from user limit 3:  #[0,n]</span><br></pre></td></tr></table></figure></p></li></ol><p>使用Mybatis实现分页,核心是sql!</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line">   List&lt;User&gt; <span class="title function_">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span>;</span><br></pre></td></tr></table></figure></li><li><p>Mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByLimit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h3><p>不再使用SQL实现分页</p><ol><li><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUserByRowBounds</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getUserByRowBounds</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RowBounds实现</span></span><br><span class="line">        <span class="type">RowBounds</span> <span class="variable">rowBounds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowBounds</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过java代码层面实现分页</span></span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.du.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="literal">null</span>,rowBounds);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h3><p>PageHelper–&gt;Mybatis分页插件</p><p>了解即可,万一以后公司的架构师说要使用,知道它是什么东西就行了!</p><h2 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h2><h3 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h3><p>根本原因:解耦、可拓展、提高利用、分层开发中、上层不用管具体的实现、大家都遵守共同的标准、使得开发变得容易、规范性更好</p><p>关于接口的理解:</p><ul><li><p>就是定义(规范、约束）与实现（名实分离的原则）的分离。</p></li><li><p>接口的本身反映了系统设计人员对系统的抽象理解</p></li><li><p>抽象体(abstract class);抽象面(interface)两类接口</p><p>三个面向:</p><p>-　面向对象<br>-　面向过程<br>-　接口设计与非接口设计是针对利用技术而言的</p></li></ul><h2 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h2><p>There’s one more trick to Mapper classes like BlogMapper. Their mapped        statements don’t need to be mapped with XML at all. Instead they can        use Java Annotations. For example, the XML above could be eliminated        and replaced with:      </p><p>The annotations are a lot cleaner for simple statements, however, Java        Annotations are both limited and messier(混乱) for more complicated        statements. Therefore, if you have to do anything complicated,        you’re better off with XML mapped statements.      </p><p>It will be up to you(这完全取决于你) and your project team to determine which is right        for you(选择何种方式来配置映射), and how important it is to you that your mapped statements        be defined in a consistent way. That said, you’re never locked into        a single approach. You can very easily migrate (移植)Annotation based        Mapped Statements to XML and vice versa. (反之亦然)     </p><ol><li><p>注解在接口上的实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Select(&quot;select * from user&quot;)</span><br><span class="line">    List<span class="tag">&lt;<span class="name">User</span>&gt;</span> getUsers();</span><br></pre></td></tr></table></figure></li><li><p>需要在核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.du.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//底层主要应用反射</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>本质:反射机制实现</p><p>底层:动态代理!</p><p>![image-20220411113103487](D:\Program Files\Typora\images\image-20220411113103487.png)</p><p>Mybatis详细的执行编程!</p><h3 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h3><p>我们可以在工具类创建的时候实现自动提交事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">getUsers</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//方法存在多个参数,所有的参数前面必须加上@Para(&quot;id&quot;)注解</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) value(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete  from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">      <span class="comment">//底层主要应用反射</span></span><br><span class="line">      <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">      List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">      <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">          System.out.println(user);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">      System.out.println(user);</span><br><span class="line"></span><br><span class="line">      mapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>, <span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;123456&quot;</span>));*/</span><br><span class="line"></span><br><span class="line">      mapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;四风谷&quot;</span>,<span class="string">&quot;123123&quot;</span>));</span><br><span class="line"></span><br><span class="line">      mapper.deleteUser(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">      sqlSession.close();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>核心配置文件中绑定接口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.du.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;mapper class=&quot;com.du.dao.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--resource=&quot;com/du/dao/*UserMapper.xml&quot;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;package name=&quot;com.du.dao&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;注意:&#x3D;&#x3D;</p><p>-　我们必须要将接口注册绑定到核心配置文件中<br>-　关于@Param()注解<br>  -　基本类型的参数或者String类型,需要加上<br>  -　引用类型不需要加<br>  -　如果只有一个基本类型的话,可以忽略,但是建议大家都加上<br>  -　我们在SQL中引用的就是这里的@Param(“id”)设定的属性名</p><p><strong>#()和${}的区别:</strong></p><p>-　用来传递参数,#{}sql解析时会加上””,当成字符串来解析,如role_id&#x3D;”roleid”<br>-　#{}能够很大程序上防止sql注入<br>-　用${}传入的参数直接在生成的sql中,如上面的语句,用role_id&#x3D;${roleid,jdbcType&#x3D;INTGER}.那么sql在解析的时候值为role_id&#x3D;roleid,执行时会报错<br>-　${}方式无法防止sql注入<br>-　$一般用于传入数据库对象,比如数据库表名<br>-　能用#{}时尽量有#{}<br>-　注意:mybatis排序时使用order by 动态参数时需要注意,使用${}而不用#{}</p><h2 id="9、lombok"><a href="#9、lombok" class="headerlink" title="9、lombok"></a>9、lombok</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing <span class="title function_">up</span><span class="params">(增加)</span> your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="keyword">class</span> <span class="title class_">has</span> a fully featured builder, Automate your logging variables, and much more. </span><br></pre></td></tr></table></figure><p>使用步骤:</p><ol><li><p>在IDEA中安装Lombok插件</p></li><li><p>在项目中导入lombok的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在实体类上加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure></li><li><p>Lombok常用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span> / <span class="meta">@Setter</span></span><br><span class="line">   <span class="meta">@ToString</span></span><br><span class="line">   <span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Data</span> 注解相当于 Getter + Setter + ToString +  <span class="meta">@RequiredArgsConstrutor</span>，可以用在pojo上</span><br><span class="line">   <span class="meta">@Builder</span></span><br><span class="line">   <span class="meta">@EqualsAndHashCode</span>   构造函数</span><br><span class="line"><span class="meta">@AllArgsConstructor</span>  全部参数构造函数</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>   无参数构造函数</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span> NoNull参数和常量构造函数</span><br><span class="line">    <span class="meta">@Value</span></span><br></pre></td></tr></table></figure><p>@Data:无参构造,get,set,tostring.hashcode,equals,canEqual</p><p>&#x3D;&#x3D;注意:无需一味追求高大上的技术,适合的才是王道!Lombok有它的得天独厚的优点,也有它悔之不及的缺点,熟知其稳定性缺点,在实战中灵活运用才是根本!&#x3D;&#x3D;</p></li></ol><h2 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h2><h3 id="10-1、建立teacher-Student数据库"><a href="#10-1、建立teacher-Student数据库" class="headerlink" title="10.1、建立teacher,Student数据库"></a>10.1、建立teacher,Student数据库</h3><p>-　多个学生对应一个都是<br>-　对于学生而言,　　&#x3D;&#x3D;关联&#x3D;&#x3D;–&gt;多个学生关联一个都是　<strong>[多对一]</strong><br>-　对于都是而言,　　&#x3D;&#x3D;集合–&gt;&#x3D;&#x3D;一个都是有很多学生　<strong>[一对多]</strong>![image-20220412103211031](D:\Program Files\Typora\images\image-20220412103211031.png)</p><p>SQL:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">USE mybatis</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `teacher` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(`id`,`name`) <span class="keyword">VALUES</span> (<span class="number">1</span>,&quot;杜老师&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`tid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">KEY `fktid` (`tid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `fktid` <span class="keyword">FOREIGN</span> KEY (`tid`) <span class="keyword">REFERENCES</span> `teacher` (`id`)</span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;小张&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;小李&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `student` (`id`,`name`,`tid`) <span class="keyword">VALUES</span> (<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;小王&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="10-2、-x3D-x3D-idea中的问题-Maven项目module名未加粗或右侧Maven模块不显示module的解决方法-x3D-x3D"><a href="#10-2、-x3D-x3D-idea中的问题-Maven项目module名未加粗或右侧Maven模块不显示module的解决方法-x3D-x3D" class="headerlink" title="10.2、&#x3D;&#x3D;idea中的问题-Maven项目module名未加粗或右侧Maven模块不显示module的解决方法&#x3D;&#x3D;"></a>10.2、&#x3D;&#x3D;idea中的问题-Maven项目module名未加粗或右侧Maven模块不显示module的解决方法&#x3D;&#x3D;</h3><p>通常以下两种情况：</p><pre><code>module处于remove状态，还没有delete. Ctrl+Alt+Shift+S打开Project Structure,选择Module,点击最上面+号,选择import module,导入module对应的pom.xml文件.module处于ignore状态. Ctrl+Alt+S打开Setting,找到ignore Files,去掉相关module的勾选.</code></pre><h3 id="10-3、测试环境搭建"><a href="#10-3、测试环境搭建" class="headerlink" title="10.3、测试环境搭建"></a>10.3、测试环境搭建</h3><ol><li><p>导入lombok</p></li><li><p>新建实体类Teacher,Student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//多个学生拥有一个老师</span></span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>建立Mapper接口</p></li><li><p>建立Mapper.xml文件（注意　&#x3D;&#x3D;写上命名空间&#x3D;&#x3D;）</p></li><li><p>在核心配置文件中绑定注册Mapper接口或者文件[方式很多，随心选]</p></li><li><p>测试查询是否成功！</p></li></ol><h4 id="10-4、按照查询嵌套处理"><a href="#10-4、按照查询嵌套处理" class="headerlink" title="10.4、按照查询嵌套处理"></a>10.4、按照查询嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.du.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- &lt;select id=&quot;getStudent&quot; resultType=&quot;Student&quot;&gt;</span></span><br><span class="line"><span class="comment">        select s.id,s.name,t.name from student s,teacher t where s.tid=t.id;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1.查询所有的学生信息</span></span><br><span class="line"><span class="comment">        2.根据查询出来的学生的tid，寻找对应的老师！子查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--复杂的属性，需要单独处理  对象：association  集合：collection--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.teacher where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-5、按照结果嵌套处理"><a href="#10-5、按照结果嵌套处理" class="headerlink" title="10.5、按照结果嵌套处理"></a>10.5、按照结果嵌套处理</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">        select s.id sid,s.name sname,t.name tname</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid=t.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="10-6、回顾Mysql多对一查询方式："><a href="#10-6、回顾Mysql多对一查询方式：" class="headerlink" title="10.6、回顾Mysql多对一查询方式："></a>10.6、回顾Mysql多对一查询方式：</h4><ul><li>子查询</li><li>联表查询</li></ul><h2 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h2><p>比如一个老师拥有多个学生</p><p>对于老师而言就是一对多的关系</p><ol><li><h5 id="环境搭建，和刚才一样"><a href="#环境搭建，和刚才一样" class="headerlink" title="环境搭建，和刚才一样"></a>环境搭建，和刚才一样</h5><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">       select s.id sid ,s.name sname,t.name tname,t.id tid</span><br><span class="line">       from student s,teacher t</span><br><span class="line">       where s.tid=t.id and t.id=#&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--复杂的属性，需要单独处理，对象：association  集合：collection</span></span><br><span class="line"><span class="comment">       javaType指定属性的类型</span></span><br><span class="line"><span class="comment">       集合中的泛型信息，要使用ofType获取</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.teacher where id=#&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.student where tid=#&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><ol><li>关联－association  多对一</li><li>集合－collection     一对多</li><li>javaType &amp; ofType<ul><li>JavaType:用来指定实体类中属性的类型</li><li>ofType:用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li></ul></li></ol></li><li><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul><li>保证SQL的可读性，尽量保证通俗易懂</li><li>注意一对多和多对一中属性名和字段名的问题！</li><li>如果问题不好排查，可以使用日志。</li></ul></li><li><p>慢SQL     1s     1000s</p></li><li><p>面试高频</p><ul><li>Mysql引擎</li><li>InnoDB底层原理</li><li>索引</li><li>索引优化</li></ul></li></ol><h2 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h2><h4 id="12-1、什么是动态SQL？"><a href="#12-1、什么是动态SQL？" class="headerlink" title="12.1、什么是动态SQL？"></a>12.1、什么是动态SQL？</h4><p>&#x3D;&#x3D;动态SQL就是指根据不同的条件产生不同的sql语句。&#x3D;&#x3D;</p><p>One of the most powerful features of MyBatis has always been its  Dynamic SQL capabilities. If you have any experience with JDBC or any  similar framework, you understand how painful it is to conditionally  concatenate strings of SQL together, making sure not to forget spaces or to omit a comma at the end of a list of columns. Dynamic SQL can be  downright （十足的）painful to deal with（处理;  应付）.</p><p>While working with Dynamic SQL will never be a party, MyBatis  certainly improves the situation with a powerful Dynamic SQL language  that can be used within any mapped SQL statement.</p><p>The Dynamic SQL elements should be familiar to anyone who has used  JSTL （Java server pages standarded tag library，即JSP标准标签库）or any similar XML based text processors. In previous versions of  MyBatis, there were a lot of elements to know and understand. MyBatis 3  greatly improves upon this, and now there are less than half of those  elements to work with. MyBatis employs powerful OGNL based expressions  to eliminate most of the other elements:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure><h3 id="12-2、搭建环境"><a href="#12-2、搭建环境" class="headerlink" title="12.2、搭建环境"></a>12.2、搭建环境</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE mybatis</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog` (</span><br><span class="line">`id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><h3 id="12-3、创建一个基础工程"><a href="#12-3、创建一个基础工程" class="headerlink" title="12.3、创建一个基础工程"></a>12.3、创建一个基础工程</h3><ol><li><p>导包</p></li><li><p>编写配置文件</p></li><li><p>编写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blog</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写实体类对应的Mapper接口和Mapper.xml文件</p></li></ol><h3 id="12-4、IF"><a href="#12-4、IF" class="headerlink" title="12.4、IF"></a>12.4、IF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">The most common thing to do in dynamic SQL is conditionally include a part of a where clause.For example:</span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">     SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    This statement would provide an optional text search type of functionality. If you passed in no title, then all active Blogs would be returned. But if you do pass in a title, it will look for a title like that (for the keen eyed眼光尖锐的, yes in this case your parameter value would need to include any masking or wildcard characters).</span><br><span class="line"></span><br><span class="line">What if we wanted to optionally search by title and author? First, I’d change the name of the statement to make more sense. Then simply add another condition.</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">       select * from mybatis.blog where 1=1</span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">           and title=#&#123;title&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author !=null&quot;</span>&gt;</span></span><br><span class="line">           and author = #&#123;author&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-5、choose-when-otherwise"><a href="#12-5、choose-when-otherwise" class="headerlink" title="12.5、choose(when,otherwise)"></a>12.5、choose(when,otherwise)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                  title=#&#123;title&#125;</span><br><span class="line">               <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">                   and author=#&#123;author&#125;</span><br><span class="line">               <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                  and views = #&#123;views&#125;</span><br><span class="line">               <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="12-6、trim-where-set"><a href="#12-6、trim-where-set" class="headerlink" title="12.6、trim(where,set)"></a>12.6、trim(where,set)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select * from mybatis.blog</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author !=null&quot;</span>&gt;</span></span><br><span class="line">               and author = #&#123;author&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title !=null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;所谓的动态SQL，本质还是SQL语句，只是可以在sql层面去执行一个逻辑代码&#x3D;&#x3D;</p><p>if where set choose when</p><h3 id="12-7、SQL片断"><a href="#12-7、SQL片断" class="headerlink" title="12.7、SQL片断"></a>12.7、SQL片断</h3><p>有时候，我们可能会将一些功能的部分抽出来，方便利用！</p><ul><li>使用SQL标签抽取公共部分</li><li>在需要使用的地方使用include标签引用即可</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sql id=&quot;if-title-author&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title=#&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author !=null&quot;</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意事项：<ul><li>最好基于单表来定义SQL片断</li><li>不要存在where标签</li></ul></li></ul><h3 id="12-8、foreach"><a href="#12-8、foreach" class="headerlink" title="12.8、foreach"></a>12.8、foreach</h3><p>Another common necessity for dynamic SQL is the need to iterate over(遍历) a collection, often to build an IN condition. For example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</span><br><span class="line">        open=&quot;ID in (&quot; separator=&quot;,&quot; close=&quot;)&quot; nullable=&quot;true&quot;&gt;</span><br><span class="line">          #&#123;item&#125;</span><br><span class="line">    &lt;/foreach&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>The <em>foreach</em> element is very powerful, and allows you to  specify a collection, declare item and index variables that can be used  inside the body of the element. It also allows you to specify opening  and closing strings, and add a separator to place in between iterations. The element is smart （智能的）in that it won’t accidentally append extra  separators. </p><p>NOTE You can pass any Iterable（可迭代）  object (for example List, Set, etc.), as well as any Map or Array object to foreach as collection parameter. When using an Iterable or Array,  index will be the number of current iteration and value item will be the element retrieved in this iteration. When using a Map (or Collection of Map.Entry objects), index will be the key object and item will be the  value object.</p><p>This wraps up（结束） the discussion regarding the XML configuration file and XML mapping files. The next section will discuss the Java API in  detail, so that you can get the most out of （最有效的使用;发挥…的最大功效）the mappings that you’ve  created.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--select *from mymatis.blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">    我们现在传递一个万能的map,这个map中可以存在一个集合!</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForEach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">                id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryBlogForEach</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">BlogMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sqlSession.getMapper(BlogMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ids.add(<span class="number">1</span>);</span><br><span class="line">        ids.add(<span class="number">2</span>);</span><br><span class="line">        ids.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogForEach(map);</span><br><span class="line">        <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">            System.out.println(blog);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;动态SQL就是在拼接sql语句，我们只要保证sql的正确性，按照sql的格式去排列组合就可以了！&#x3D;&#x3D;</p><p>建议：</p><ul><li>先在Mysql中写出完整的sql，再对应地去修改动态sql，实现通用即可。</li></ul><h2 id="13、缓存"><a href="#13、缓存" class="headerlink" title="13、缓存"></a>13、缓存</h2><h4 id="13-1、缓存简介"><a href="#13-1、缓存简介" class="headerlink" title="13.1、缓存简介"></a>13.1、缓存简介</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查询 ： 连接数据库  ，耗资源</span><br><span class="line">一次查询的结果，给他暂存在一个可以直接取到的地方－－〉内存（缓存）</span><br><span class="line">我们再次查询相同数据的时候，直接去缓存取，就不用去数据库了－－〉快</span><br></pre></td></tr></table></figure><ol><li><p>什么是缓存[Cache]？</p><ul><li>存在中的临时数据</li><li>将用户经常查询的数据放在缓存中，用户查询数据就不用从磁盘上查询，而从缓存中查询，可以提高查询效率，解决高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><p>减少和数据库的交互次数，减少系统开销，提高系统效率。</p></li><li><p>什么样的数据能使用缓存？</p><p>经常查询并且不经常改变的数据。</p></li></ol><h4 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h4><p>​          MyBatis includes a powerful transactional query caching  feature which is very configurable and customizable.          A lot of changes have been made in the MyBatis 3 cache  implementation to make it both more powerful and far easier to  configure.        </p><p>​          By default, just local session caching is enabled that is used solely to cache data for the duration of a session.          To enable a global second level of caching you simply need to add one line to your SQL Mapping file:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;cache/&gt;</span><br></pre></td></tr></table></figure><p>​          Literally that’s it. The effect of this one simple statement is as follows:        </p><ul><li><p>All results from select statements in the mapped statement file will be cached.</p></li><li><p>All insert, update and delete statements in the mapped statement file will flush the cache.</p></li><li><p>The cache will use a Least Recently Used (&#x3D;&#x3D;LRU&#x3D;&#x3D;) algorithm for eviction(驱逐；驱赶).</p></li><li><p>The cache will not flush on any sort of time based schedule (i.e. no Flush Interval).</p></li><li><p>The cache will store 1024 references to lists or objects (whatever the query method returns).          </p></li><li><p>​            The cache will be treated as a read&#x2F;write cache, meaning objects retrieved are not shared and            can be safely modified by the caller, without interfering with other potential modifications by            other callers or threads.          </p></li><li><p>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。</p></li><li><p>Mybatis系统中默认定义了两级缓存：一级缓存和二级缓存</p><ul><li>默认情况下只开启一级缓存。（SqlSession级别的缓存，也称本地缓存）</li><li>二级缓存需要手动开启和配置，它是基于namespace级别的缓存。</li><li>为了提高扩展性，Mybatis定义了缓存接口Cache。我们可以通过Cache接口来自定义二级缓存。</li></ul></li></ul><h4 id="13-3、一级缓存"><a href="#13-3、一级缓存" class="headerlink" title="13.3、一级缓存"></a>13.3、一级缓存</h4><ul><li><p>一级缓存也叫本地缓存：</p><ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中取，没有必要再去查询数据库了</li></ul></li><li><p>测试步骤：</p><ul><li><p>开启日志</p></li><li><p>测试在一个Session中查询两次相同记录</p></li><li><p>查看日志输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Opening JDBC Connection</span><br><span class="line">Created connection <span class="number">10705272.</span></span><br><span class="line">==&gt;  Preparing: select * from user where id=? </span><br><span class="line">==&gt; Parameters: <span class="number">1</span>(Integer)</span><br><span class="line">&lt;==    Columns: id, name, pwd</span><br><span class="line">&lt;==        Row: <span class="number">1</span>, 狂神, <span class="number">123456</span></span><br><span class="line">&lt;==      Total: <span class="number">1</span></span><br><span class="line">User(id=<span class="number">1</span>, name=狂神, pwd=<span class="number">123456</span>)</span><br><span class="line">========================================</span><br><span class="line">User(id=<span class="number">1</span>, name=狂神, pwd=<span class="number">123456</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection<span class="meta">@a35978</span>]</span><br><span class="line">Returned connection <span class="number">10705272</span> to pool.</span><br></pre></td></tr></table></figure></li><li><p>缓存失效情况：</p><ul><li><p>增删改操作可能改变原来的数据，所以会刷新缓存！</p></li><li><p>查询不同的数据</p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有修改成功，原因待查！</span></span><br><span class="line">        <span class="comment">// mapper.updateUser(new User(2, &quot;Hello&quot;, &quot;123456&quot;));</span></span><br><span class="line"></span><br><span class="line">        sqlSession.clearCache();<span class="comment">//手动清理缓存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line"></span><br><span class="line">        System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">        sqlSession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭这个区段！一级缓存就是一个Map.</p><h4 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h4><ul><li><p>二级缓存也叫全局缓存，一级缓存作用域太低，所以诞生了二级缓存。</p></li><li><p>基于namespace级别的缓存，一个名称空间对应一个二级缓存</p></li><li><p>工作机制：</p><ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没有了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息就可以从二级缓存中获取内容；</li><li>不同的Mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li><li><p>开启二级缓存步骤：</p><ol><li><p>在核心配置文件中的settings标签下设置cacheEnabled为True</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--显式的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试：问题，我们需要将实体类序列化，否则就会报错</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.io.NotSerializableException: com.du.pojo.User</span><br></pre></td></tr></table></figure></li><li><p>小结：只要开启了二级缓存，在同一个Mapper下就有效；所有数据都会先放到一级缓存中，只有当会话提交或者关闭的时候才会提交到二级缓存中</p></li></ol></li></ul><h4 id="13-5、缓存的原理"><a href="#13-5、缓存的原理" class="headerlink" title="13.5、缓存的原理"></a>13.5、缓存的原理</h4><p>![image-20220415083649417](D:\Program Files\Typora\images\image-20220415083649417.png)</p><h4 id="13-6、自定义缓存–ehcache"><a href="#13-6、自定义缓存–ehcache" class="headerlink" title="13.6、自定义缓存–ehcache"></a>13.6、自定义缓存–ehcache</h4><ul><li><p>EhCache是一个纯Java的进程内缓存，具有快速、精干等的特点，是Hibernate中默认的CacheProvider.Ehcache是一种广泛使用的开源Java分页缓存，主要面向通用缓存</p></li><li><p>要在程序中使用chcache,先要导包，在Mapper中指定使用ehcache缓存实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.cache/mybatis-ehcache --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>缓存配置文件ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">&quot;http://ehcache.org/ehcache.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">&quot;E:/cache&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;3000&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;3600&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;cloud_user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;1800&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">&quot;LRU&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Redis数据库来做缓存！</p></li></ul><h4 id="13-7、Spring"><a href="#13-7、Spring" class="headerlink" title="13.7、Spring"></a>13.7、Spring</h4><p>下载地址：<a href="https://repo.spring.io./release/org/springframework/spring/5.2.0.RELEASE/">https://repo.spring.io./release/org/springframework/spring/5.2.0.RELEASE/</a></p><p>文档：<a href="https://docs.spring.io./spring/docs/5.2.0RELEASE/spring-framework-reference/index.html">https://docs.spring.io./spring/docs/5.2.0RELEASE/spring-framework-reference/index.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;[TOC]&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>自己是自己的读者</title>
    <link href="https://dumingqing.github.io/2022/04/08/%E8%87%AA%E5%B7%B1%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BB%E8%80%85/"/>
    <id>https://dumingqing.github.io/2022/04/08/%E8%87%AA%E5%B7%B1%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84%E8%AF%BB%E8%80%85/</id>
    <published>2022-04-08T02:26:39.000Z</published>
    <updated>2022-04-20T10:31:13.915Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题也是悟出来的,你写得东西再好,别人也不一定理解,网上好文章多了去了,都有时间看吗?</p><p>所以,自己写的东西读者就是你自己,其中最主要的还是在写东西的过程中的再加工、再思考,最终形成一些只适用于自己的理念或者结论。以前一直的误区是写给这个看、写给那个看,影响了写东西的积极性。</p><p>自己写的东西也有一些值得经常翻出来看看的,有时间整理出来,放到心爱的博客里,时不时看看,一方面可以发挥劳神费力写出来的东西的再利用问题,增加附加值,另一方面在看中欣赏,也有一份成就感,况且还有自己花费大力气搭建的博客,也得经常光顾一下。</p><p>自己写的东西有很多都是在自己人生特定时段写下的,经常翻出来欣赏一番,也是对自己人生的一种回忆。如果静下心来想想,人生也不算太曲折,人生中还是有很多美好的东西的,尽管当时不觉得,可放到现在甚至将来再回过头去看,就会有不一样的感觉了!</p><p>如今认识到了好多问题是自己性格上的问题,不去说好也谈不上不好,这就要看放在什么环境下去谈了。通过几十年职业生涯的改造,也已经发生的很大的变化了,从这方面来说,那以前所谓的曲折就是一种历练,还要感谢那些帮助自己历练的人和物哪!以这种观点回头看以往,就客观多了,人非圣人,都有一个成长的过程,只要在成长,过往的一切都是值得回忆的!多年记录的东西就成了宝贵的财富了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个问题也是悟出来的,你写得东西再好,别人也不一定理解,网上好文章多了去了,都有时间看吗?&lt;/p&gt;
&lt;p&gt;所以,自己写的东西读者就是你自己,其中最主要的还是在写东西的过程中的再加工、再思考,最终形成一些只适用于自己的理念或者结论。以前一直的误区是写给这个看、写给那个看,影响</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>自嘲--作</title>
    <link href="https://dumingqing.github.io/2022/04/07/%E8%87%AA%E5%98%B2-%E4%BD%9C/"/>
    <id>https://dumingqing.github.io/2022/04/07/%E8%87%AA%E5%98%B2-%E4%BD%9C/</id>
    <published>2022-04-07T00:54:01.000Z</published>
    <updated>2022-04-07T01:24:47.221Z</updated>
    
    <content type="html"><![CDATA[<p>以为已不作,<br>         愚则天天作。<br>         叨叨人负我,<br>         愤愤虚渡着。<br>         乾坤二挂辞,<br>         不修就是作?</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以为已不作,&lt;br&gt;         愚则天天作。&lt;br&gt;         叨叨人负我,&lt;br&gt;         愤愤虚渡着。&lt;br&gt;         乾坤二挂辞,&lt;br&gt;         不修就是作?&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>人生定数</title>
    <link href="https://dumingqing.github.io/2022/04/05/%E4%BA%BA%E7%94%9F%E5%AE%9A%E6%95%B0/"/>
    <id>https://dumingqing.github.io/2022/04/05/%E4%BA%BA%E7%94%9F%E5%AE%9A%E6%95%B0/</id>
    <published>2022-04-05T00:56:14.000Z</published>
    <updated>2022-04-07T01:21:25.809Z</updated>
    
    <content type="html"><![CDATA[<p>假如人生能重来,<br>        也跟此生差不多,<br>        基因刻在骨子里,<br>        漫长岁月不偏离。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假如人生能重来,&lt;br&gt;        也跟此生差不多,&lt;br&gt;        基因刻在骨子里,&lt;br&gt;        漫长岁月不偏离。&lt;/p&gt;
&lt;hr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>心中的桃花源</title>
    <link href="https://dumingqing.github.io/2022/03/26/%E5%BF%83%E4%B8%AD%E7%9A%84%E6%A1%83%E8%8A%B1%E6%BA%90/"/>
    <id>https://dumingqing.github.io/2022/03/26/%E5%BF%83%E4%B8%AD%E7%9A%84%E6%A1%83%E8%8A%B1%E6%BA%90/</id>
    <published>2022-03-26T13:02:55.000Z</published>
    <updated>2022-04-07T02:35:14.623Z</updated>
    
    <content type="html"><![CDATA[<p>　　古人写桃花源记是以桃花源为名写的是心中的那片桃花源，同样古人在写“采菊东篱下，悠然见南山”的诗句时，也是在以菊花、南山为名在写心中的桃花源……<br>　　心中没有桃花源、菊花源，再美的景色又如何？心中没有桃花源，再富丽堂皇的房子能生辉吗？</p><p>很久我就有这样的疑问，豪宅、美景、美食能给自己的生活增添多少快乐？再大的房子,再好的景色,再甘甜的美食……,诸多外在的东西,有时间享受吗？有心情享受吗？有能力享受吗？如果是拖着疲惫之体甚至恹恹病体,就是住在仙景中的宫殿里,吃着美味佳肴,喝着琼浆玉液,也一样不会快乐;相反,如果拥有精力充沛之体,住在”陋室”,吃着粗茶淡饭又如何?也一样会快乐地生活着!这就又想起了“陋室铭”，不知作者心中的桃花源是何等的广阔、壮美景象！<br>　　超脱繁杂，戒除庸俗，在简单的生活中修身养性，努力修炼心中的那片桃花源，唯如此,才是获得快乐生活的根本！</p><p>有人会说,再加上豪宅、美景、美食哪?岂不是更快乐吗?存疑!不然怎样会有玩物丧志之词哪?人一旦为物所累,为物所役,还有心思修炼吗?拥有这些,再看淡这些,才是修行人的境界!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　古人写桃花源记是以桃花源为名写的是心中的那片桃花源，同样古人在写“采菊东篱下，悠然见南山”的诗句时，也是在以菊花、南山为名在写心中的桃花源……&lt;br&gt;　　心中没有桃花源、菊花源，再美的景色又如何？心中没有桃花源，再富丽堂皇的房子能生辉吗？&lt;/p&gt;
&lt;p&gt;很久我就有这样的</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>再见北京</title>
    <link href="https://dumingqing.github.io/2022/03/26/%E5%86%8D%E8%A7%81%E5%8C%97%E4%BA%AC/"/>
    <id>https://dumingqing.github.io/2022/03/26/%E5%86%8D%E8%A7%81%E5%8C%97%E4%BA%AC/</id>
    <published>2022-03-26T02:01:39.000Z</published>
    <updated>2022-04-07T01:39:16.079Z</updated>
    
    <content type="html"><![CDATA[<p>来北京将近三个月了,后天就要走了,在这春意盎然的春天就要离开了,北京再见!<br>        北京三个月的生活是学习的生活,是运动的生活,也是修炼的生活……</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来北京将近三个月了,后天就要走了,在这春意盎然的春天就要离开了,北京再见!&lt;br&gt;        北京三个月的生活是学习的生活,是运动的生活,也是修炼的生活……&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>博客开篇寄语</title>
    <link href="https://dumingqing.github.io/2022/03/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87%E5%AF%84%E8%AF%AD/"/>
    <id>https://dumingqing.github.io/2022/03/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E7%AF%87%E5%AF%84%E8%AF%AD/</id>
    <published>2022-03-25T12:26:39.000Z</published>
    <updated>2022-04-07T01:36:10.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="连续奋斗了一个多星期-终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！"><a href="#连续奋斗了一个多星期-终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！" class="headerlink" title="连续奋斗了一个多星期,终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！"></a>连续奋斗了一个多星期,终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！</h2><h2 id="给自己的心灵在网络上安个家-把平时写的”记事、随想、学习”搬到博客里-时常看看-挺方便的。"><a href="#给自己的心灵在网络上安个家-把平时写的”记事、随想、学习”搬到博客里-时常看看-挺方便的。" class="headerlink" title="给自己的心灵在网络上安个家,把平时写的”记事、随想、学习”搬到博客里,时常看看,挺方便的。"></a>给自己的心灵在网络上安个家,把平时写的”记事、随想、学习”搬到博客里,时常看看,挺方便的。</h2><h2 id="还有-如果有时间-也把以前写的东西以及那些珍贵的照片也都搬过来-那真是一件了不起的事。"><a href="#还有-如果有时间-也把以前写的东西以及那些珍贵的照片也都搬过来-那真是一件了不起的事。" class="headerlink" title="还有,如果有时间,也把以前写的东西以及那些珍贵的照片也都搬过来,那真是一件了不起的事。"></a>还有,如果有时间,也把以前写的东西以及那些珍贵的照片也都搬过来,那真是一件了不起的事。</h2><h2 id="在熟悉中学习-在学习中完善-想着这里一定会成为自己的一片乐土-心灵的港湾"><a href="#在熟悉中学习-在学习中完善-想着这里一定会成为自己的一片乐土-心灵的港湾" class="headerlink" title="在熟悉中学习,在学习中完善,想着这里一定会成为自己的一片乐土,心灵的港湾!"></a>在熟悉中学习,在学习中完善,想着这里一定会成为自己的一片乐土,心灵的港湾!</h2><hr><h5 id="二○二二年三月二十五日、星期五、阴历二月二十三-于北京"><a href="#二○二二年三月二十五日、星期五、阴历二月二十三-于北京" class="headerlink" title="二○二二年三月二十五日、星期五、阴历二月二十三 　于北京"></a>二○二二年三月二十五日、星期五、阴历二月二十三 　于北京</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;连续奋斗了一个多星期-终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！&quot;&gt;&lt;a href=&quot;#连续奋斗了一个多星期-终于建好了博客，尽管其中还有诸多不满意，等待着以后逐渐完善吧！&quot; class=&quot;headerlink&quot; title=&quot;连续奋斗了一个多</summary>
      
    
    
    
    
  </entry>
  
</feed>
